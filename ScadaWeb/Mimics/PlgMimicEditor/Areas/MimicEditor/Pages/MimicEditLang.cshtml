@page "~/plugins/MimicEditor/js/mimic-edit-lang.js"
@inject EditorManager editorManager
@{
    Response.ContentType = "text/javascript";
    Response.Headers.CacheControl = "no-cache, no-store";
    var editorDictKey = typeof(MimicEditModel).FullName + ".Js";

    string EnumDictToJs(LocaleDict dict)
    {
        System.Text.StringBuilder sb = new();
        sb.AppendLine("{");

        foreach (KeyValuePair<string, string> pair in dict.Phrases)
        {
            sb.AppendFormat("['{0}']: '{1}',", pair.Value.JsEncode(), pair.Key.JsEncode()).AppendLine();
        }

        sb.Append('}');
        return sb.ToString();
    }
}
translation = {};
translation.editor = @WebUtils.DictionaryToJs(editorDictKey);

translation.propGrid = @WebUtils.DictionaryToJs(editorDictKey + ".PropGrid");

translation.structTree = @WebUtils.DictionaryToJs(editorDictKey + ".StructTree");

translation.model = {
category: @WebUtils.DictionaryToJs(editorManager.ModelTranslation.CategoryDict, true),

mimic: @WebUtils.DictionaryToJs(editorManager.ModelTranslation.MimicDict, true),

component: @WebUtils.DictionaryToJs(editorManager.ModelTranslation.ComponentDict, true),

components: new Map([
@foreach (var (typeName, dict) in editorManager.ModelTranslation.ComponentDicts.OrderBy(pair => pair.Key))
{
    @string.Format("['{0}', ", typeName).ToHtmlString()
    @WebUtils.DictionaryToJs(dict, true)
    @("],")
    @Environment.NewLine.ToHtmlString()
}
]),

enumerations: new Map([
@foreach (var (subtypeName, dict) in editorManager.ModelTranslation.EnumDicts.OrderBy(pair => pair.Key))
{
    @string.Format("['{0}', ", subtypeName).ToHtmlString()
    @EnumDictToJs(dict).ToHtmlString()
    @("],")
    @Environment.NewLine.ToHtmlString()
}
]),

structures: new Map([
@foreach (var (subtypeName, dict) in editorManager.ModelTranslation.StructDicts.OrderBy(pair => pair.Key))
{
    @string.Format("['{0}', ", subtypeName).ToHtmlString()
    @WebUtils.DictionaryToJs(dict, true)
    @("],")
    @Environment.NewLine.ToHtmlString()
}
])
};
