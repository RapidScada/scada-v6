var rs=rs??{};rs.mimic=rs.mimic??{};rs.mimic.LoadStep=(class{static UNDEFINED=0;static PROPERTIES=1;static FACEPLATES=2;static COMPONENTS=3;static IMAGES=4;static COMPLETE=5;});rs.mimic.LoadResult=(class{ok=false;warn=false;msg="";});rs.mimic.LoadContext=(class{static COMPONENTS_TO_REQUEST=1e3;static IMAGES_TO_REQUEST=100;static IMAGE_TOTAL_SIZE=1048576;controllerUrl;mimicKey;result=new rs.mimic.LoadResult;step=rs.mimic.LoadStep.UNDEFINED;componentIndex=0;imageIndex=0;faceplateIndex=0;unknownTypes=new Set;constructor(n,t){this.controllerUrl=n;this.mimicKey=t.toString()}});rs.mimic.ScaleType=(class{static NUMERIC=0;static FIT_SCREEN=1;static FIT_WIDTH=2;});rs.mimic.Scale=(class n{static _TYPE_KEY="Mimic.ScaleType";static _VALUE_KEY="Mimic.ScaleValue";static _VALUES=[.1,.25,.5,.75,1,1.25,1.5,2,3,4,5,10];static _MIN=.1;static _MAX=10;type;value;constructor(t,i){this.type=t??rs.mimic.ScaleType.NUMERIC;this.value=n._normalize(i)}static _normalize(t){if(Number.isFinite(t)){if(t<n._MIN)return n._MIN;if(t>n._MAX)return n._MAX;else{const n=1e6;return Math.trunc(t*n)/n}}else return 1}setValue(t){this.value=n._normalize(t)}save(t){ScadaUtils.setStorageItem(t,n._TYPE_KEY,this.type);ScadaUtils.setStorageItem(t,n._VALUE_KEY,this.value)}load(t){this.type=parseInt(ScadaUtils.getStorageItem(t,n._TYPE_KEY))||this.type;this.value=parseFloat(ScadaUtils.getStorageItem(t,n._VALUE_KEY))||this.value}getPrev(){for(let t=n._VALUES.length-1;t>=0;t--){let i=n._VALUES[t];if(scale.value>i)return new n(rs.mimic.ScaleType.NUMERIC,i)}return this}getNext(){for(let t=0,i=n._VALUES.length;t<i;t++){let i=n._VALUES[t];if(scale.value<i)return new n(rs.mimic.ScaleType.NUMERIC,i)}return this}});rs.mimic.ObjectHelper=(class n{static _getObjectToUpdate(n,t,i){let r=n;for(let n=i;n<t.length-1;n++){let i=t[n];if(r instanceof Object&&r.hasOwnProperty(i))r=r[i];else{r=null;break}}return r}static _updateValue(t,i,r){let u=t[i];if(typeof u=="number")t[i]=Number(r)||0;else if(typeof u=="string")t[i]=String(r);else if(typeof u=="boolean")t[i]=Boolean(r);else if(u instanceof Object){let t=r instanceof Object;for(let i of Object.keys(u))n._updateValue(u,i,t?r[i]:null)}}static getPropertyValue(t,i,r){let u=n._getObjectToUpdate(t,i,r);if(u instanceof Object&&i.length>r){let n=i.at(-1);return u[n]}}static setPropertyValue(t,i,r,u){let f=n._getObjectToUpdate(t,i,r);if(f instanceof Object&&i.length>r){let t=i.at(-1);n._updateValue(f,t,u)}}static mergeValues(t,i){if(t===null||t===undefined||i===null||i===undefined)return t;if(typeof t=="number")return Number(i)||0;if(typeof t=="string")return String(i);if(typeof t=="boolean")return Boolean(i);if(t instanceof Object){let r=ScadaUtils.deepClone(t),u=i instanceof Object;for(let[f,e]of Object.entries(t))r[f]=n.mergeValues(e,u?i[f]:null);return r}return t}});rs.mimic.KnownCategory=(class{static APPEARANCE="appearance";static BEHAVIOR="behavior";static DATA="data";static DESIGN="design";static LAYOUT="layout";static MISC="misc";});rs.mimic.BasicType=(class{static BOOL="bool";static ENUM="enum";static FLOAT="float";static INT="int";static LIST="list";static STRING="string";static STRUCT="struct";});rs.mimic.Subtype=(class{static ACTION_TYPE="ActionType";static COMPARISON_OPERATOR="ComparisonOperator";static DATA_MEMBER="DataMember";static IMAGE_SIZE_MODE="ImageSizeMode";static LOGICAL_OPERATOR="LogicalOperator";static LINK_TARGET="LinkTarget";static MODAL_WIDTH="ModalWidth";static CONTENT_ALIGNMENT="ContentAlignment";static TEXT_DIRECTION="TextDirection";static ACTION="Action";static BORDER="Border";static COMMAND_ARGS="CommandArgs";static CONDITION="Condition";static CORNER_RADIUS="CornerRadius";static FONT="Font";static IMAGE_CONDITION="ImageCondition";static LINK_ARGS="LinkArgs";static PADDING="Padding";static POINT="Point";static PROPERTY_BINDING="PropertyBinding";static PROPERTY_EXPORT="PropertyExport";static SIZE="Size";static VISUAL_STATE="VisualState";});rs.mimic.PropertyEditor=(class{static COLOR_DIALOG="ColorDialog";static FONT_DIALOG="FontDialog";static IMAGE_DIALOG="ImageDialog";static PROPERTY_DIALOG="PropertyDialog";static TEXT_EDITOR="TextEditor";});rs.mimic.PropertyDescriptor=(class{name="";displayName="";category="";isReadOnly=false;isBrowsable=true;type="";subtype="";editor="";tweakpaneOptions=null;editorOptions=null;constructor(n){Object.assign(this,n)}});rs.mimic.ObjectDescriptor=(class{propertyDescriptors=new Map;sorted=true;add(n){this.propertyDescriptors.set(n.name,n)}get(n){return this.propertyDescriptors.get(n)}delete(n){this.propertyDescriptors.delete(n)}});rs.mimic.MimicDescriptor=(class extends rs.mimic.ObjectDescriptor{constructor(){super();const n=rs.mimic.KnownCategory,t=rs.mimic.BasicType,u=rs.mimic.Subtype,r=rs.mimic.PropertyEditor,i=rs.mimic.PropertyDescriptor;this.add(new i({name:"backColor",displayName:"Background color",category:n.APPEARANCE,type:t.STRING,editor:r.COLOR_DIALOG}));this.add(new i({name:"backgroundImage",displayName:"Background image",category:n.APPEARANCE,type:t.STRING,editor:r.IMAGE_DIALOG}));this.add(new i({name:"font",displayName:"Font",category:n.APPEARANCE,type:t.STRUCT,subtype:u.FONT,editor:r.FONT_DIALOG}));this.add(new i({name:"foreColor",displayName:"Foreground color",category:n.APPEARANCE,type:t.STRING,editor:r.COLOR_DIALOG}));this.add(new i({name:"stylesheet",displayName:"Stylesheet",category:n.APPEARANCE,type:t.STRING,editor:r.TEXT_EDITOR,editorOptions:{language:"css"}}));this.add(new i({name:"script",displayName:"Script",category:n.BEHAVIOR,type:t.STRING,editor:r.TEXT_EDITOR,editorOptions:{language:"js"}}));this.add(new i({name:"tooltip",displayName:"Tooltip",category:n.BEHAVIOR,type:t.STRING}));this.add(new i({name:"propertyExports",displayName:"Exported properties",category:n.DATA,type:t.LIST,subtype:u.PROPERTY_EXPORT}));this.add(new i({name:"size",displayName:"Size",category:n.LAYOUT,type:t.STRUCT,subtype:u.SIZE}))}});rs.mimic.ComponentDescriptor=(class extends rs.mimic.ObjectDescriptor{constructor(){super();const n=rs.mimic.KnownCategory,t=rs.mimic.BasicType,r=rs.mimic.Subtype,i=rs.mimic.PropertyDescriptor;this.add(new i({name:"blinking",displayName:"Blinking",category:n.BEHAVIOR,type:t.BOOL}));this.add(new i({name:"enabled",displayName:"Enabled",category:n.BEHAVIOR,type:t.BOOL}));this.add(new i({name:"visible",displayName:"Visible",category:n.BEHAVIOR,type:t.BOOL}));this.add(new i({name:"checkRights",displayName:"Check rights",category:n.DATA,type:t.BOOL}));this.add(new i({name:"deviceNum",displayName:"Device number",category:n.DATA,type:t.INT}));this.add(new i({name:"inCnlNum",displayName:"Input channel",category:n.DATA,type:t.INT}));this.add(new i({name:"objNum",displayName:"Object number",category:n.DATA,type:t.INT}));this.add(new i({name:"outCnlNum",displayName:"Output channel",category:n.DATA,type:t.INT}));this.add(new i({name:"propertyBindings",displayName:"Property bindings",category:n.DATA,type:t.LIST,subtype:r.PROPERTY_BINDING}));this.add(new i({name:"id",displayName:"ID",category:n.DESIGN,isReadOnly:!0,type:t.INT}));this.add(new i({name:"name",displayName:"Name",category:n.DESIGN,type:t.STRING}));this.add(new i({name:"typeName",displayName:"Type name",category:n.DESIGN,isReadOnly:!0,type:t.STRING}));this.add(new i({name:"location",displayName:"Location",category:n.LAYOUT,type:t.STRUCT,subtype:r.POINT}));this.add(new i({name:"size",displayName:"Size",category:n.LAYOUT,type:t.STRUCT,subtype:r.SIZE}))}});rs.mimic.RegularComponentDescriptor=(class extends rs.mimic.ComponentDescriptor{constructor(){super();const n=rs.mimic.KnownCategory,t=rs.mimic.BasicType,r=rs.mimic.Subtype,u=rs.mimic.PropertyEditor,i=rs.mimic.PropertyDescriptor;this.add(new i({name:"backColor",displayName:"Background color",category:n.APPEARANCE,type:t.STRING,editor:u.COLOR_DIALOG}));this.add(new i({name:"border",displayName:"Border",category:n.APPEARANCE,type:t.STRUCT,subtype:r.BORDER}));this.add(new i({name:"cornerRadius",displayName:"Corner radius",category:n.APPEARANCE,type:t.STRUCT,subtype:r.CORNER_RADIUS}));this.add(new i({name:"cssClass",displayName:"CSS class",category:n.APPEARANCE,type:t.STRING}));this.add(new i({name:"foreColor",displayName:"Foreground color",category:n.APPEARANCE,type:t.STRING,editor:u.COLOR_DIALOG}));this.add(new i({name:"blinkingState",displayName:"When blinking",category:n.BEHAVIOR,type:t.STRUCT,subtype:r.VISUAL_STATE}));this.add(new i({name:"clickAction",displayName:"On click",category:n.BEHAVIOR,type:t.STRUCT,subtype:r.ACTION}));this.add(new i({name:"disabledState",displayName:"On disabled",category:n.BEHAVIOR,type:t.STRUCT,subtype:r.VISUAL_STATE}));this.add(new i({name:"hoverState",displayName:"On hover",category:n.BEHAVIOR,type:t.STRUCT,subtype:r.VISUAL_STATE}));this.add(new i({name:"script",displayName:"Script",category:n.BEHAVIOR,type:t.STRING,editor:u.TEXT_EDITOR,editorOptions:{language:"js"}}));this.add(new i({name:"tooltip",displayName:"Tooltip",category:n.BEHAVIOR,type:t.STRING}))}});rs.mimic.TextDescriptor=(class extends rs.mimic.RegularComponentDescriptor{constructor(){super();const n=rs.mimic.KnownCategory,t=rs.mimic.BasicType,r=rs.mimic.Subtype,u=rs.mimic.PropertyEditor,i=rs.mimic.PropertyDescriptor;this.add(new i({name:"font",displayName:"Font",category:n.APPEARANCE,type:t.STRUCT,subtype:r.FONT,editor:u.FONT_DIALOG}));this.add(new i({name:"text",displayName:"Text",category:n.APPEARANCE,type:t.STRING}));this.add(new i({name:"textAlign",displayName:"Text alignment",category:n.APPEARANCE,type:t.ENUM,subtype:r.CONTENT_ALIGNMENT}));this.add(new i({name:"textDirection",displayName:"Text direction",category:n.APPEARANCE,type:t.ENUM,subtype:r.TEXT_DIRECTION}));this.add(new i({name:"wordWrap",displayName:"Word wrap",category:n.APPEARANCE,type:t.BOOL}));this.add(new i({name:"autoSize",displayName:"Auto size",category:n.LAYOUT,type:t.BOOL}));this.add(new i({name:"padding",displayName:"Padding",category:n.LAYOUT,type:t.STRUCT,subtype:r.PADDING}))}});rs.mimic.PictureDescriptor=(class extends rs.mimic.RegularComponentDescriptor{constructor(){super();const n=rs.mimic.KnownCategory,t=rs.mimic.BasicType,r=rs.mimic.Subtype,u=rs.mimic.PropertyEditor,i=rs.mimic.PropertyDescriptor;this.add(new i({name:"imageName",displayName:"Image",category:n.APPEARANCE,type:t.STRING,editor:u.IMAGE_DIALOG}));this.add(new i({name:"rotation",displayName:"Rotation",category:n.APPEARANCE,type:t.FLOAT}));this.add(new i({name:"conditions",displayName:"Conditions",category:n.BEHAVIOR,type:t.LIST,subtype:r.IMAGE_CONDITION}));this.add(new i({name:"sizeMode",displayName:"Size mode",category:n.BEHAVIOR,type:t.ENUM,subtype:r.IMAGE_SIZE_MODE}));this.add(new i({name:"padding",displayName:"Padding",category:n.LAYOUT,type:t.STRUCT,subtype:r.PADDING}))}});rs.mimic.PanelDescriptor=(class extends rs.mimic.RegularComponentDescriptor{});rs.mimic.FaceplateDescriptor=(class extends rs.mimic.ComponentDescriptor{});rs.mimic.StructureDescriptor=(class extends rs.mimic.ObjectDescriptor{constructor(){super();this.sorted=!1}});rs.mimic.ActionDescriptor=(class extends rs.mimic.StructureDescriptor{constructor(){super();const n=rs.mimic.BasicType,i=rs.mimic.Subtype,r=rs.mimic.PropertyEditor,t=rs.mimic.PropertyDescriptor;this.add(new t({name:"actionType",displayName:"Action type",type:n.ENUM,subtype:i.ACTION_TYPE}));this.add(new t({name:"chartArgs",displayName:"Chart arguments",type:n.STRING}));this.add(new t({name:"commandArgs",displayName:"Command arguments",type:n.STRUCT,subtype:i.COMMAND_ARGS}));this.add(new t({name:"linkArgs",displayName:"Link arguments",type:n.STRUCT,subtype:i.LINK_ARGS}));this.add(new t({name:"script",displayName:"Script",type:n.STRING,editor:r.TEXT_EDITOR,editorOptions:{language:"js"}}))}});rs.mimic.BorderDescriptor=(class extends rs.mimic.StructureDescriptor{constructor(){super();const n=rs.mimic.BasicType,i=rs.mimic.PropertyEditor,t=rs.mimic.PropertyDescriptor;this.add(new t({name:"width",displayName:"Width",type:n.INT}));this.add(new t({name:"color",displayName:"Color",type:n.STRING,editor:i.COLOR_DIALOG}))}});rs.mimic.CommandArgsDescriptor=(class extends rs.mimic.StructureDescriptor{constructor(){super();const n=rs.mimic.BasicType,t=rs.mimic.PropertyDescriptor;this.add(new t({name:"showDialog",displayName:"Show dialog",type:n.BOOL}));this.add(new t({name:"cmdVal",displayName:"Command value",type:n.FLOAT}))}});rs.mimic.ConditionDescriptor=(class extends rs.mimic.StructureDescriptor{constructor(){super();const n=rs.mimic.BasicType,i=rs.mimic.Subtype,t=rs.mimic.PropertyDescriptor;this.add(new t({name:"comparisonOper1",displayName:"Comparison 1",type:n.ENUM,subtype:i.COMPARISON_OPERATOR}));this.add(new t({name:"comparisonArg1",displayName:"Argument 1",type:n.FLOAT}));this.add(new t({name:"logicalOper",displayName:"Logical operator",type:n.ENUM,subtype:i.LOGICAL_OPERATOR}));this.add(new t({name:"comparisonOper2",displayName:"Comparison 2",type:n.ENUM,subtype:i.COMPARISON_OPERATOR}));this.add(new t({name:"comparisonArg2",displayName:"Argument 2",type:n.FLOAT}))}});rs.mimic.CornerRadiusDescriptor=(class extends rs.mimic.StructureDescriptor{constructor(){super();const n=rs.mimic.BasicType,t=rs.mimic.PropertyDescriptor;this.add(new t({name:"topLeft",displayName:"Top-left",type:n.INT}));this.add(new t({name:"topRight",displayName:"Top-right",type:n.INT}));this.add(new t({name:"bottomRight",displayName:"Bottom-right",type:n.INT}));this.add(new t({name:"bottomLeft",displayName:"Bottom-left",type:n.INT}))}});rs.mimic.ImageConditionDescriptor=(class extends rs.mimic.ConditionDescriptor{constructor(){super();const n=rs.mimic.BasicType,t=rs.mimic.PropertyEditor,i=rs.mimic.PropertyDescriptor;this.add(new i({name:"imageName",displayName:"Image",type:n.STRING,editor:t.IMAGE_DIALOG}))}});rs.mimic.LinkArgsDescriptor=(class extends rs.mimic.StructureDescriptor{constructor(){super();const n=rs.mimic.BasicType,i=rs.mimic.Subtype,t=rs.mimic.PropertyDescriptor;this.add(new t({name:"url",displayName:"URL",type:n.STRING}));this.add(new t({name:"target",displayName:"Target",type:n.ENUM,subtype:i.LINK_TARGET}));this.add(new t({name:"viewID",displayName:"View ID",type:n.INT}));this.add(new t({name:"modalWidth",displayName:"Modal width",type:n.ENUM,subtype:i.MODAL_WIDTH}));this.add(new t({name:"modalHeight",displayName:"Modal height",type:n.INT}))}});rs.mimic.PaddingDescriptor=(class extends rs.mimic.StructureDescriptor{constructor(){super();const n=rs.mimic.BasicType,t=rs.mimic.PropertyDescriptor;this.add(new t({name:"top",displayName:"Top",type:n.INT}));this.add(new t({name:"right",displayName:"Right",type:n.INT}));this.add(new t({name:"bottom",displayName:"Bottom",type:n.INT}));this.add(new t({name:"left",displayName:"Left",type:n.INT}))}});rs.mimic.PropertyBindingDescriptor=(class extends rs.mimic.StructureDescriptor{constructor(){super();const n=rs.mimic.BasicType,i=rs.mimic.Subtype,r=rs.mimic.PropertyEditor,t=rs.mimic.PropertyDescriptor;this.add(new t({name:"propertyName",displayName:"Property name",type:n.STRING,editor:r.PROPERTY_DIALOG}));this.add(new t({name:"dataSource",displayName:"Data source",type:n.STRING}));this.add(new t({name:"dataMember",displayName:"Data member",type:n.ENUM,subtype:i.DATA_MEMBER}));this.add(new t({name:"format",displayName:"Format",type:n.STRING}))}});rs.mimic.PropertyExportDescriptor=(class extends rs.mimic.StructureDescriptor{constructor(){super();const n=rs.mimic.BasicType,t=rs.mimic.PropertyDescriptor;this.add(new t({name:"name",displayName:"Property name",type:n.STRING}));this.add(new t({name:"path",displayName:"Path",type:n.STRING}))}});rs.mimic.VisualStateDescriptor=(class extends rs.mimic.StructureDescriptor{constructor(){super();const n=rs.mimic.BasicType,i=rs.mimic.PropertyEditor,t=rs.mimic.PropertyDescriptor;this.add(new t({name:"backColor",displayName:"Back color",type:n.STRING,editor:i.COLOR_DIALOG}));this.add(new t({name:"foreColor",displayName:"Fore color",type:n.STRING,editor:i.COLOR_DIALOG}));this.add(new t({name:"borderColor",displayName:"Border color",type:n.STRING,editor:i.COLOR_DIALOG}));this.add(new t({name:"underline",displayName:"Underline",type:n.BOOL}))}});rs.mimic.DescriptorSet=(class{static mimicDescriptor=new rs.mimic.MimicDescriptor;static componentDescriptors=new Map([["Text",new rs.mimic.TextDescriptor],["Picture",new rs.mimic.PictureDescriptor],["Panel",new rs.mimic.PanelDescriptor]]);static getFaceplateDescriptor(n){const i=rs.mimic.KnownCategory,r=rs.mimic.PropertyDescriptor;let t=new rs.mimic.FaceplateDescriptor;if(n&&Array.isArray(n.document.propertyExports))for(let u of n.document.propertyExports)u.name&&t.add(new r({name:u.name,displayName:u.name,category:i.MISC}));return t}static structureDescriptors=new Map([["Action",new rs.mimic.ActionDescriptor],["Border",new rs.mimic.BorderDescriptor],["CommandArgs",new rs.mimic.CommandArgsDescriptor],["CornerRadius",new rs.mimic.CornerRadiusDescriptor],["ImageCondition",new rs.mimic.ImageConditionDescriptor],["LinkArgs",new rs.mimic.LinkArgsDescriptor],["Padding",new rs.mimic.PaddingDescriptor],["PropertyBinding",new rs.mimic.PropertyBindingDescriptor],["PropertyExport",new rs.mimic.PropertyExportDescriptor],["VisualState",new rs.mimic.VisualStateDescriptor]]);});rs.mimic.MimicFactory=(class{static parseProperties(n){const t=rs.mimic.PropertyParser;return n??={},{backColor:t.parseString(n.backColor),backgroundImage:t.parseString(n.backgroundImage),font:rs.mimic.Font.parse(n.font),foreColor:t.parseString(n.foreColor),stylesheet:t.parseString(n.stylesheet),script:t.parseString(n.script),tooltip:t.parseString(n.tooltip),propertyExports:rs.mimic.PropertyExportList.parse(n.propertyExports),size:rs.mimic.Size.parse(n.size)}}});rs.mimic.ComponentFactory=(class{_copyProperties(n,t){n.id=t.id;n.typeName=t.typeName;n.properties=this.parseProperties(t.properties);n.properties.typeName=t.typeName;n.bindings=t.bindings;n.parentID=t.parentID}createProperties(){return{blinking:!1,enabled:!0,visible:!0,checkRights:!1,deviceNum:0,inCnlNum:0,objNum:0,outCnlNum:0,propertyBindings:new rs.mimic.PropertyBindingList,id:0,name:"",typeName:"",location:new rs.mimic.Point,size:new rs.mimic.Size}}parseProperties(n){const t=rs.mimic.PropertyParser;return n??={},{blinking:t.parseBool(n.blinking),enabled:t.parseBool(n.enabled),visible:t.parseBool(n.visible),checkRights:t.parseBool(n.checkRights),deviceNum:t.parseInt(n.deviceNum),inCnlNum:t.parseInt(n.inCnlNum),objNum:t.parseInt(n.objNum),outCnlNum:t.parseInt(n.outCnlNum),propertyBindings:rs.mimic.PropertyBindingList.parse(n.propertyBindings),id:t.parseInt(n.id),name:t.parseString(n.name),typeName:t.parseString(n.typeName),location:rs.mimic.Point.parse(n.location),size:rs.mimic.Size.parse(n.size)}}createComponent(n){let t=new rs.mimic.Component;return t.typeName=n,t.properties=this.createProperties(n),t.properties.typeName=n,t}createComponentFromSource(n){let t=new rs.mimic.Component;return this._copyProperties(t,n),t}});rs.mimic.RegularComponentFactory=(class extends rs.mimic.ComponentFactory{createProperties(){let n=super.createProperties();return Object.assign(n,{backColor:"",border:new rs.mimic.Border,cornerRadius:new rs.mimic.CornerRadius,cssClass:"",foreColor:""}),Object.assign(n,{blinkingState:new rs.mimic.VisualState,clickAction:new rs.mimic.Action,disabledState:new rs.mimic.VisualState,hoverState:new rs.mimic.VisualState,script:"",tooltip:""}),n}parseProperties(n){const t=rs.mimic.PropertyParser;let i=super.parseProperties(n);return n??={},Object.assign(i,{backColor:t.parseString(n.backColor),border:rs.mimic.Border.parse(n.border),cornerRadius:rs.mimic.CornerRadius.parse(n.cornerRadius),cssClass:t.parseString(n.cssClass),foreColor:t.parseString(n.foreColor)}),Object.assign(i,{blinkingState:rs.mimic.VisualState.parse(n.blinkingState),clickAction:rs.mimic.Action.parse(n.clickAction),disabledState:rs.mimic.VisualState.parse(n.disabledState),hoverState:rs.mimic.VisualState.parse(n.hoverState),script:t.parseString(n.script),tooltip:t.parseString(n.tooltip)}),i}});rs.mimic.TextFactory=(class extends rs.mimic.RegularComponentFactory{createProperties(){let n=super.createProperties();return Object.assign(n,{font:new rs.mimic.Font({inherit:!0}),text:"Text",textAlign:rs.mimic.ContentAlignment.TOP_LEFT,textDirection:rs.mimic.TextDirection.HORIZONTAL,wordWrap:!1}),Object.assign(n,{autoSize:!1,padding:new rs.mimic.Padding}),n}parseProperties(n){const t=rs.mimic.PropertyParser;let i=super.parseProperties(n);return n??={},Object.assign(i,{font:rs.mimic.Font.parse(n.font),text:t.parseString(n.text,"Text"),textAlign:t.parseString(n.textAlign,rs.mimic.ContentAlignment.TOP_LEFT),textDirection:t.parseString(n.textDirection,rs.mimic.TextDirection.HORIZONTAL),wordWrap:t.parseBool(n.wordWrap)}),Object.assign(i,{autoSize:t.parseBool(n.autoSize),padding:rs.mimic.Padding.parse(n.padding)}),i}createComponent(){return super.createComponent("Text")}});rs.mimic.PictureFactory=(class extends rs.mimic.RegularComponentFactory{createProperties(){let n=super.createProperties();return Object.assign(n,{imageName:"",rotation:0}),Object.assign(n,{conditions:new rs.mimic.ImageConditionList,sizeMode:rs.mimic.ImageSizeMode.NORMAL}),Object.assign(n,{padding:new rs.mimic.Padding}),n}parseProperties(n){const i=rs.mimic.PropertyParser;let t=super.parseProperties(n);return n??={},Object.assign(t,{imageName:i.parseString(n.imageName),rotation:i.parseFloat(n.rotation)}),Object.assign(t,{conditions:rs.mimic.ImageConditionList.parse(n.conditions),sizeMode:i.parseString(n.sizeMode,rs.mimic.ImageSizeMode.NORMAL)}),Object.assign(t,{padding:rs.mimic.Padding.parse(n.padding)}),t}createComponent(){return super.createComponent("Picture")}});rs.mimic.PanelFactory=(class extends rs.mimic.RegularComponentFactory{createComponent(){let n=super.createComponent("Panel");return n.children=[],n}createComponentFromSource(n){let t=super.createComponentFromSource(n);return t.children=[],t}});rs.mimic.FaceplateFactory=(class extends rs.mimic.ComponentFactory{faceplate;constructor(n){super();this.faceplate=n}_updateSize(n){n.properties.size=rs.mimic.Size.parse(this.faceplate.document.size)}_createComponents(n){const t=rs.mimic.FactorySet,i=rs.mimic.MimicHelper;if(Array.isArray(this.faceplate.components)){for(let i of this.faceplate.components){let r=t.getComponentFactory(i.typeName,this.faceplate.faceplateMap);if(r){let t=r.createComponentFromSource(i);n.components.push(t);t.name&&n.componentByName.set(t.name,t)}}i.defineNesting(n,n.components)}}_createCustomProperties(n,t){const i=rs.mimic.ObjectHelper;t??={};for(let r of this.faceplate.propertyExports){let u=n.getTargetPropertyValue(r),f=t[r.name];if(f===undefined)n.properties[r.name]=u;else{let t=i.mergeValues(u,f);n.properties[r.name]=t;n.setTargetPropertyValue(r,t)}}}_applyModel(n,t){n.typeName=n.properties.typeName=this.faceplate.typeName;n.model=this.faceplate;this._createComponents(n);this._createCustomProperties(n,t?.properties)}createComponent(){let n=new rs.mimic.FaceplateInstance;return n.properties=this.createProperties(),this.faceplate&&(this._updateSize(n),this._applyModel(n,null)),n}createComponentFromSource(n){let t=new rs.mimic.FaceplateInstance;return this._copyProperties(t,n),this.faceplate&&this._applyModel(t,n),t}});rs.mimic.FactorySet=(class n{static componentFactories=new Map([["Text",new rs.mimic.TextFactory],["Picture",new rs.mimic.PictureFactory],["Panel",new rs.mimic.PanelFactory]]);static getFaceplateFactory(n){return new rs.mimic.FaceplateFactory(n)}static getComponentFactory(t,i){if(i.has(t)){let r=i.get(t);return n.getFaceplateFactory(r)}return n.componentFactories.get(t)}});rs.mimic.MimicHelper=(class n{static _indexComponents(n,t){for(let i=t??0;i<n.children.length;i++){let t=n.children[i];t.index=i}}static _setComponentProperty(n,t,i){const u=rs.mimic.DataProvider,f=rs.mimic.ObjectHelper;let r=u.getFieldValue(i,t.dataMember,t.cnlProps.unit);t.format&&(r=t.format.replace("{0}",String(r)));f.setPropertyValue(n.properties,t.propertyChain,0,r);n.isFaceplate&&n.handlePropertyChanged(t.propertyName)}static defineNesting(n,t,i){let r=i??new Map(t.map(n=>[n.id,n]));for(let i of t)if(i.parentID>0){let n=r.get(i.parentID);n&&(n.children??=[],i.index=n.children.length,i.parent=n,n.children.push(i))}else n.children??=[],i.index=n.children.length,i.parent=n,n.children.push(i)}static addToParent(t,i,r){if(t.children){i.parentID=t.id??0;let u=Number.isInteger(r)&&0<=r&&r<t.children.length?r:t.children.length;i.parent=t;t.children.splice(u,0,i);n._indexComponents(t,u)}}static removeFromParent(t){let i=t.parent;i.children&&t.index>=0&&(i.children.splice(t.index,1),n._indexComponents(i,t.index),t.index=-1)}static areRelatives(n,t){let i=t.parent;while(i){if(i===n)return!0;i=i.parent}return!1}static areSiblings(n){let t=new Set(n.map(n=>n.parentID));return t.size===1}static sendToBack(t,i){if(t.children){let r=new Set(i.map(n=>n.id));t.children=t.children.filter(n=>!r.has(n.id));t.children.unshift(...i);n._indexComponents(t)}}static sendBackward(n,t){if(n.children){let r=t.map(n=>n.index).sort(),i=-1;for(let t of r)if(t>=0&&i<t-1){i=t-1;let r=n.children[t],u=n.children[i];n.children[t]=u;n.children[i]=r;r.index--;u.index++}else i=t}}static bringForward(n,t){if(n.children){let r=t.map(n=>n.index).sort(),i=n.children.length;for(let t=r.length-1;t>=0;t--){let u=r[t];if(u>=0&&i>u+1){i=u+1;let t=n.children[u],r=n.children[i];n.children[u]=r;n.children[i]=t;t.index++;r.index--}else i=u}}}static bringToFront(t,i){if(t.children){let r=new Set(i.map(n=>n.id));t.children=t.children.filter(n=>!r.has(n.id));t.children.push(...i);n._indexComponents(t)}}static placeBefore(t,i,r){if(t.children){let e=new Set(i.map(n=>n.id)),u=t.children.filter(n=>!e.has(n.id)),f=u.indexOf(r);f>=0&&(u.splice(f,0,...i),t.children=u,n._indexComponents(t))}}static placeAfter(t,i,r){if(t.children){let e=new Set(i.map(n=>n.id)),u=t.children.filter(n=>!e.has(n.id)),f=u.indexOf(r);f>=0&&(u.splice(f+1,0,...i),t.children=u,n._indexComponents(t))}}static arrange(n,t,i){if(n.children&&t.length===i.length){let f=new Map,e=new Set;for(let n=0;n<t.length;n++){let r=t[n];f.set(i[n],r);e.add(r.id)}let u=[],r=0,o=0,s=n.children.length;while(r<s&&o<s){let t=f.get(r);t?(t.index=r++,u.push(t)):(t=n.children[o++],e.has(t.id)||(t.index=r++,u.push(t)))}n.children=u}}static getMinLocation(n){let t=NaN,i=NaN;for(let r of n){let n=r.x,u=r.y;(isNaN(t)||t>n)&&(t=n);(isNaN(i)||i>u)&&(i=u)}return{x:t,y:i}}static updateData(t,i){const u=rs.mimic.DataProvider;let r=!1;if(t.bindings&&Array.isArray(t.bindings.propertyBindings)&&t.bindings.propertyBindings.length>0)for(let f of t.bindings.propertyBindings)if(f.propertyName&&f.cnlNum>0&&f.cnlProps){let e=i.getCurData(f.cnlNum,f.cnlProps.joinLen),o=i.getPrevData(f.cnlNum,f.cnlProps.joinLen);u.dataEqual(e,o)&&i.prevCnlDataMap||(n._setComponentProperty(t,f,e),r=!0)}return r}});rs.mimic.MimicBase=(class{dependencies;document;components;images;faceplates;dependencyMap;componentMap;imageMap;faceplateMap;children;clear(){this.dependencies=[];this.document={};this.components=[];this.images=[];this.faceplates=[];this.dependencyMap=new Map;this.componentMap=new Map;this.imageMap=new Map;this.faceplateMap=new Map;this.children=[]}isFaceplate(n){return this.faceplateMap?.has(n)}getComponentFactory(n){return rs.mimic.FactorySet.getComponentFactory(n,this.faceplateMap)}createComponent(n){let t=this.getComponentFactory(n.typeName);return t?t.createComponentFromSource(n):null}});rs.mimic.Mimic=(class extends rs.mimic.MimicBase{dom;renderer;get id(){return 0}get isContainer(){return!0}get width(){return this.document?this.document.size.width:0}get height(){return this.document?this.document.size.height:0}async _loadPart(n){const i=rs.mimic.LoadStep;let r=!1,t=null;n.step===i.UNDEFINED&&(n.step=i.PROPERTIES,n.result.msg="Not completed.");switch(n.step){case i.PROPERTIES:t=await this._loadProperties(n);n.step++;break;case i.FACEPLATES:if(this.dependencies.length>0){let i=this.dependencies[n.faceplateIndex];i.hasError?r=!0:t=await this._loadFaceplate(n,i.typeName);++n.faceplateIndex>=this.dependencies.length&&(this._prepareFaceplates(),n.step++)}else n.step++,r=!0;break;case i.COMPONENTS:t=await this._loadComponents(n);t.ok&&t.data.endOfComponents&&n.step++;break;case i.IMAGES:t=await this._loadImages(n);t.ok&&t.data.endOfImages&&n.step++;break;case i.COMPLETE:n.result.ok=!0;n.result.msg="";break;default:t=Dto.fail("Unknown loading step.")}return t!==null&&(t.ok?t.data.mimicKey===n.mimicKey?r=!0:n.result.msg="Stamp mismatch.":n.result.msg=t.msg),r}async _loadProperties(n){console.log(ScadaUtils.getCurrentTime()+" Load mimic properties");let t=await fetch(n.controllerUrl+"GetMimicProperties?key="+n.mimicKey);if(t.ok){let n=await t.json();if(n.ok){if(Array.isArray(n.data.dependencies))for(let t of n.data.dependencies){let n=new rs.mimic.FaceplateMeta(t);this.dependencies.push(n);this.dependencyMap.set(n.typeName,n)}this.document=rs.mimic.MimicFactory.parseProperties(n.data.document)}return n}return Dto.fail(t.statusText)}async _loadFaceplate(n,t){console.log(ScadaUtils.getCurrentTime()+` Load '${t}' faceplate`);let i=await fetch(n.controllerUrl+"GetFaceplate?key="+n.mimicKey+"&typeName="+t);if(i.ok){let n=await i.json();if(n.ok){let i=new rs.mimic.Faceplate(n.data,t);this.faceplates.push(i);this.faceplateMap.set(t,i)}else this.faceplateMap.set(t,null);return n}return Dto.fail(i.statusText)}async _loadComponents(n){console.log(ScadaUtils.getCurrentTime()+" Load components starting with "+n.componentIndex);let t=await fetch(n.controllerUrl+"GetComponents?key="+n.mimicKey+"&index="+n.componentIndex+"&count="+rs.mimic.LoadContext.COMPONENTS_TO_REQUEST);if(t.ok){let i=await t.json();if(i.ok&&Array.isArray(i.data.components)){n.componentIndex+=i.data.components.length;for(let t of i.data.components){let i=this.createComponent(t);i?(this.components.push(i),this.componentMap.set(i.id,i)):t.typeName&&(n.unknownTypes.add(t.typeName),n.result.warn=!0)}}return i}return Dto.fail(t.statusText)}async _loadImages(n){console.log(ScadaUtils.getCurrentTime()+" Load images starting with "+n.imageIndex);let t=await fetch(n.controllerUrl+"GetImages?key="+n.mimicKey+"&index="+n.imageIndex+"&count="+rs.mimic.LoadContext.COMPONENTS_TO_REQUEST+"&size="+rs.mimic.LoadContext.IMAGE_TOTAL_SIZE);if(t.ok){let i=await t.json();if(i.ok&&Array.isArray(i.data.images)){n.imageIndex+=i.data.images.length;for(let n of i.data.images){let t=new rs.mimic.Image(n);this.images.push(t);this.imageMap.set(t.name,t)}}return i}return Dto.fail(t.statusText)}_prepareFaceplates(){for(let n of this.faceplates)for(let t of n.dependencies){let i=this.faceplateMap.get(t.typeName);i&&(n.faceplates.push(i),n.faceplateMap.set(t.typeName,i))}}_defineNesting(){rs.mimic.MimicHelper.defineNesting(this,this.components,this.componentMap)}clear(){super.clear();this.dom=null;this.renderer=null}async load(n,t){let r=Date.now();console.log(ScadaUtils.getCurrentTime()+" Load mimic with key "+t);this.clear();let i=new rs.mimic.LoadContext(n,t);while(await this._loadPart(i));if(i.result.ok){this._defineNesting();let t=Date.now(),n=ScadaUtils.getCurrentTime();i.unknownTypes.size>0&&console.warn(n+" Unable to create components of types: "+Array.from(i.unknownTypes).sort().join(", "));console.info(n+" Mimic loading completed successfully in "+(t-r)+" ms")}else console.error(ScadaUtils.getCurrentTime()+" Mimic loading failed: "+i.result.msg);return i.result}addDependency(n){let t=this.dependencyMap.get(n.typeName);if(t){let i=this.dependencies.indexOf(t);this.dependencies[i]=n}else this.dependencies.push(n);this.dependencies.sort();this.dependencyMap.set(n.typeName,n)}removeDependency(n){let t=this.dependencyMap.get(n);if(t){let i=this.dependencies.indexOf(t);this.dependencies.splice(i,1);this.dependencyMap.delete(n)}}addImage(n){let t=this.imageMap.get(n.name);if(t){let i=this.images.indexOf(t);this.images[i]=n}else this.images.push(n);this.images.sort();this.imageMap.set(n.name,n)}removeImage(n){let t=this.imageMap.get(n);if(t){let i=this.images.indexOf(t);this.images.splice(i,1);this.imageMap.delete(n)}}addComponent(n,t,i,r,u){return!n||!t||!t.isContainer||n.id<=0||this.componentMap.has(n.id)?!1:(r&&u&&n.setLocation(r,u),rs.mimic.MimicHelper.addToParent(t,n,i),this.components.push(n),this.componentMap.set(n.id,n),!0)}updateParent(n,t,i,r,u){return!n||!t||!t.isContainer||n===t||rs.mimic.MimicHelper.areRelatives(n,t)?!1:(r&&u&&n.setLocation(r,u),rs.mimic.MimicHelper.removeFromParent(n),rs.mimic.MimicHelper.addToParent(t,n,i),!0)}removeComponent(n){let t=this.componentMap.get(n);if(t){let i=new Set;if(i.add(n),t.isContainer)for(let n of t.getAllChildren())i.add(n.id);this.components=this.components.filter(n=>!i.has(n.id));rs.mimic.MimicHelper.removeFromParent(t);for(let n of i)this.componentMap.delete(n)}return t}getComponentParent(n){return n>0?this.componentMap.get(n):this}toString(){return"Mimic"}});rs.mimic.Component=(class{id=0;typeName="";properties=null;bindings=null;parentID=0;index=-1;parent=null;children=null;dom=null;renderer=null;isSelected=false;constructor(n){Object.assign(this,n)}get isContainer(){return Array.isArray(this.children)}get isFaceplate(){return!1}get name(){return this.properties?.name??""}get displayName(){return this.name?`[${this.id}] ${this.name} - ${this.typeName}`:`[${this.id}] ${this.typeName}`}get x(){return this.properties?this.properties.location.x:0}set x(n){this.properties&&(this.properties.location.x=parseInt(n)||0)}get y(){return this.properties?this.properties.location.y:0}set y(n){this.properties&&(this.properties.location.y=parseInt(n)||0)}get width(){return this.properties?this.properties.size.width:0}set width(n){this.properties&&(this.properties.size.width=parseInt(n)||0)}get height(){return this.properties?this.properties.size.height:0}set height(n){this.properties&&(this.properties.size.height=parseInt(n)||0)}setLocation(n,t){this.properties&&(this.properties.location.x=parseInt(n)||0,this.properties.location.y=parseInt(t)||0)}setSize(n,t){this.properties&&(this.properties.size.width=parseInt(n)||0,this.properties.size.height=parseInt(t)||0)}getAllChildren(){function t(i){if(i.isContainer)for(let r of i.children)n.push(r),t(r)}let n=[];return t(this),n}toPlainObject(){return{id:this.id,name:this.name,typeName:this.typeName,properties:this.properties,parentID:this.parentID,index:this.index,children:this.children?[]:null}}toString(){return this.displayName}});rs.mimic.Image=(class{name="";mediaType="";data=null;constructor(n){Object.assign(this,n)}get dataUrl(){return this.data?`data:${this.mediaType};base64,${this.data}`:""}set dataUrl(n){if(n&&n.startsWith("data:")){let t=n.indexOf(";base64,");if(t>=0){this.mediaType=n.substring(5,t);this.data=n.substring(t+8);return}}this.data=null}toString(){return this.name}});rs.mimic.FaceplateMeta=(class{typeName="";path="";isTransitive=false;hasError=false;constructor(n){Object.assign(this,n)}toString(){return this.typeName}});rs.mimic.Faceplate=(class extends rs.mimic.MimicBase{typeName="";propertyExports=[];propertyExportMap=new Map;constructor(n,t){super();this.clear();this.document=n.document??{};this.typeName=t;this._fillDependencies(n);this._fillComponents(n);this._fillImages(n);this._fillPropertyExports()}_fillDependencies(n){if(Array.isArray(n.dependencies))for(let t of n.dependencies){let n=new rs.mimic.FaceplateMeta(t);this.dependencies.push(n);this.dependencyMap.set(n.typeName,n)}}_fillComponents(n){if(Array.isArray(n.components))for(let t of n.components)this.components.push(t),this.componentMap.set(t.id,t)}_fillImages(n){if(Array.isArray(n.images))for(let t of n.images){let n=new rs.mimic.Image(t);this.images.push(n);this.imageMap.set(n.name,n)}}_fillPropertyExports(){if(Array.isArray(this.document.propertyExports))for(let n of this.document.propertyExports)if(n.name){let t=new rs.mimic.PropertyExport(n);this.propertyExports.push(t);this.propertyExportMap.set(t.name,t)}}});rs.mimic.FaceplateInstance=(class extends rs.mimic.Component{model=null;components=[];componentByName=new Map;get isContainer(){return!1}get isFaceplate(){return!0}getTargetPropertyValue(n){const i=rs.mimic.ObjectHelper;let t=n.propertyChain;if(t.length>=2){let r=t[0],n=this.componentByName.get(r);if(n){if(n.isFaceplate){let u=t[1],r=n.model?.propertyExportMap.get(u);return r?n.getTargetPropertyValue(r):i.getPropertyValue(n.properties,t,1)}return i.getPropertyValue(n.properties,t,1)}}return undefined}setTargetPropertyValue(n,t){const r=rs.mimic.ObjectHelper;let i=n.propertyChain;if(i.length>=2){let u=i[0],n=this.componentByName.get(u);if(n)if(n.isFaceplate){let f=i[1],u=n.model?.propertyExportMap.get(f);u?n.setTargetPropertyValue(u,t):r.setPropertyValue(n.properties,i,1,t)}else r.setPropertyValue(n.properties,i,1,t)}}handlePropertyChanged(n){let t=this.model?.propertyExportMap.get(n);if(t){let i=this.properties[n];this.setTargetPropertyValue(t,i)}}});rs.mimic.ActionType=(class{static NONE="None";static DRAW_CHART="DrawChart";static SEND_COMMAND="SendCommand";static OPEN_LINK="OpenLink";static EXECUTE_SCRIPT="ExecuteScript";});rs.mimic.ComparisonOperator=(class n{static NONE="None";static EQUAL="Equal";static NOT_EQUAL="NotEqual";static LESS_THAN="LessThan";static LESS_THAN_EQUAL="LessThanEqual";static GREATER_THAN="GreaterThan";static GREATER_THAN_EQUAL="GreaterThanEqual";static getDisplayName(t){switch(t){case n.EQUAL:return"=";case n.NOT_EQUAL:return"<>";case n.LESS_THAN:return"<";case n.LESS_THAN_EQUAL:return"<=";case n.GREATER_THAN:return">";case n.GREATER_THAN_EQUAL:return">=";default:return""}}});rs.mimic.DataMember=(class{static VALUE="Value";static STATUS="Status";static DISPLAY_VALUE="DisplayValue";static DISPLAY_VALUE_WITH_UNIT="DisplayValueWithUnit";static COLOR0="Color0";static COLOR1="Color1";static COLOR2="Color2";});rs.mimic.ImageSizeMode=(class{static NORMAL="Normal";static STRETCH="Stretch";static CENTER="Center";static ZOOM="Zoom";});rs.mimic.LogicalOperator=(class n{static NONE="None";static AND="And";static OR="Or";static getDisplayName(t){switch(t){case n.AND:return"&&";case n.OR:return"||";default:return""}}});rs.mimic.LinkTarget=(class{static SELF="Self";static NEW_TAB="NewTab";static NEW_MODAL="NewModal";});rs.mimic.ModalWidth=(class{static NORMAL="Normal";static SMALL="Small";static LARGE="Large";static EXTRA_LARGE="ExtraLarge";});rs.mimic.ContentAlignment=(class{static TOP_LEFT="TopLeft";static TOP_CENTER="TopCenter";static TOP_RIGHT="TopRight";static MIDDLE_LEFT="MiddleLeft";static MIDDLE_CENTER="MiddleCenter";static MIDDLE_RIGHT="MiddleRight";static BOTTOM_LEFT="BottomLeft";static BOTTOM_CENTER="BottomCenter";static BOTTOM_RIGHT="BottomRight";});rs.mimic.TextDirection=(class{static HORIZONTAL="Horizontal";static VERTICAL90="Vertical90";static VERTICAL270="Vertical270";});rs.mimic.Action=(class n{actionType=rs.mimic.ActionType.NONE;chartArgs="";commandArgs=new rs.mimic.CommandArgs;linkArgs=new rs.mimic.LinkArgs;script="";get typeName(){return"Action"}static parse(t){const r=rs.mimic.PropertyParser;let i=new n;return t&&(i.actionType=r.parseString(t.actionType,i.actionType),i.chartArgs=r.parseString(t.chartArgs),i.commandArgs=rs.mimic.CommandArgs.parse(t.commandArgs),i.linkArgs=rs.mimic.LinkArgs.parse(t.linkArgs),i.script=r.parseString(t.script)),i}});rs.mimic.Border=(class n{width=0;color="";get typeName(){return"Border"}static parse(t){const r=rs.mimic.PropertyParser;let i=new n;return t&&(i.width=r.parseInt(t.width),i.color=r.parseString(t.color)),i}});rs.mimic.CommandArgs=(class n{showDialog=true;cmdVal=0;get typeName(){return"CommandArgs"}static parse(t){const r=rs.mimic.PropertyParser;let i=new n;return t&&(i.showDialog=r.parseBool(t.showDialog,!0),i.cmdVal=r.parseFloat(t.cmdVal)),i}});rs.mimic.Condition=(class n{comparisonOper1=rs.mimic.ComparisonOperator.NONE;comparisonArg1=0;logicalOper=rs.mimic.LogicalOperator.NONE;comparisonOper2=rs.mimic.ComparisonOperator.NONE;comparisonArg2=0;get typeName(){return"Condition"}get displayName(){const t=rs.mimic.ComparisonOperator,f=rs.mimic.LogicalOperator;let i=t.getDisplayName(this.comparisonOper1),r=t.getDisplayName(this.comparisonOper2),u=f.getDisplayName(this.logicalOper),n="";return i&&(n+=`X ${i} ${this.comparisonArg1}`,r&&u&&(n+=` ${u} X ${r} ${this.comparisonArg2}`)),n}_copyFrom(n){const t=rs.mimic.PropertyParser;this.comparisonOper1=t.parseString(n.comparisonOper1,this.comparisonOper1);this.comparisonArg1=t.parseFloat(n.comparisonArg1);this.logicalOper=t.parseString(n.logicalOper,this.logicalOper);this.comparisonOper2=t.parseString(n.comparisonOper2,this.comparisonOper2);this.comparisonArg2=t.parseFloat(n.comparisonArg2)}static parse(t){let i=new n;return t&&i._copyFrom(t),i}});rs.mimic.CornerRadius=(class n{topLeft=0;topRight=0;bottomRight=0;bottomLeft=0;get typeName(){return"CornerRadius"}static parse(t){const r=rs.mimic.PropertyParser;let i=new n;return t&&(i.topLeft=r.parseInt(t.topLeft),i.topRight=r.parseInt(t.topRight),i.bottomRight=r.parseInt(t.bottomRight),i.bottomLeft=r.parseInt(t.bottomLeft)),i}});rs.mimic.Font=(class n{inherit=false;name="";size=16;bold=false;italic=false;underline=false;constructor(n){Object.assign(this,n)}get typeName(){return"Font"}static parse(t){const r=rs.mimic.PropertyParser;let i=new n;return t&&(i.inherit=r.parseBool(t.inherit),i.name=r.parseString(t.name),i.size=r.parseInt(t.size,i.size),i.bold=r.parseBool(t.bold),i.italic=r.parseBool(t.italic),i.underline=r.parseBool(t.underline)),i}});rs.mimic.ImageCondition=(class n extends rs.mimic.Condition{imageName="";get typeName(){return"ImageCondition"}static parse(t){const r=rs.mimic.PropertyParser;let i=new n;return t&&(i.imageName=r.parseString(t.imageName),i._copyFrom(t)),i}});rs.mimic.LinkArgs=(class n{url="";target=rs.mimic.LinkTarget.SELF;viewID=0;modalWidth=rs.mimic.ModalWidth.NORMAL;modalHeight=0;get typeName(){return"LinkArgs"}static parse(t){const r=rs.mimic.PropertyParser;let i=new n;return t&&(i.url=r.parseString(t.url),i.target=r.parseString(t.target,i.target),i.viewID=r.parseInt(t.viewID),i.modalWidth=r.parseString(t.modalWidth,i.modalWidth),i.modalHeight=r.parseInt(t.modalHeight)),i}});rs.mimic.Padding=(class n{top=0;right=0;bottom=0;left=0;get typeName(){return"Padding"}static parse(t){const r=rs.mimic.PropertyParser;let i=new n;return t&&(i.top=r.parseInt(t.top),i.right=r.parseInt(t.right),i.bottom=r.parseInt(t.bottom),i.left=r.parseInt(t.left)),i}});rs.mimic.Point=(class n{x=0;y=0;get typeName(){return"Point"}static parse(t){const r=rs.mimic.PropertyParser;let i=new n;return t&&(i.x=r.parseInt(t.x),i.y=r.parseInt(t.y)),i}});rs.mimic.PropertyBinding=(class n{propertyName="";dataSource="";dataMember="";format="";get typeName(){return"PropertyBinding"}get displayName(){return this.propertyName}static parse(t){const r=rs.mimic.PropertyParser;let i=new n;return t&&(i.propertyName=r.parseString(t.propertyName),i.dataSource=r.parseString(t.dataSource),i.dataMember=r.parseString(t.dataMember,rs.mimic.DataMember.VALUE),i.format=r.parseString(t.format)),i}});rs.mimic.PropertyExport=(class n{name="";path="";constructor(n){Object.assign(this,n)}get typeName(){return"PropertyExport"}get displayName(){return this.name}get propertyChain(){return this.propertyChainCache!==undefined?this.propertyChainCache:(this.propertyChainCache=this.path?this.path.split("."):[],this.propertyChainCache)}static parse(t){const r=rs.mimic.PropertyParser;let i=new n;return t&&(i.name=r.parseString(t.name),i.path=r.parseString(t.path)),i}});rs.mimic.Size=(class n{width=100;height=100;get typeName(){return"Size"}static parse(t){const r=rs.mimic.PropertyParser;let i=new n;return t&&(i.width=r.parseInt(t.width),i.height=r.parseInt(t.height)),i}});rs.mimic.VisualState=(class n{backColor="";foreColor="";borderColor="";underline=false;get typeName(){return"VisualState"}static parse(t){const r=rs.mimic.PropertyParser;let i=new n;return t&&(i.backColor=r.parseString(t.backColor),i.foreColor=r.parseString(t.foreColor),i.borderColor=r.parseString(t.borderColor),i.underline=r.parseBool(t.underline)),i}});rs.mimic.List=(class extends Array{constructor(n){super();n instanceof Function&&(Object.getPrototypeOf(this).createItem=function(){return n.call(this)})}});rs.mimic.ImageConditionList=(class n extends rs.mimic.List{constructor(){super(()=>new rs.mimic.ImageCondition)}static parse(t){const r=rs.mimic.ImageCondition;let i=new n;if(Array.isArray(t))for(let n of t)i.push(r.parse(n));return i}});rs.mimic.PropertyBindingList=(class n extends rs.mimic.List{constructor(){super(()=>new rs.mimic.PropertyBinding)}static parse(t){const r=rs.mimic.PropertyBinding;let i=new n;if(Array.isArray(t))for(let n of t)i.push(r.parse(n));return i}});rs.mimic.PropertyExportList=(class n extends rs.mimic.List{constructor(){super(()=>new rs.mimic.PropertyExport)}static parse(t){const r=rs.mimic.PropertyExport;let i=new n;if(Array.isArray(t))for(let n of t)i.push(r.parse(n));return i}});rs.mimic.PropertyParser=(class{static parseBool(n,t=false){return n?n==="true"||n==="True":t}static parseFloat(n,t=0){let i=Number.parseFloat(n);return Number.isFinite(i)?i:t}static parseInt(n,t=0){let i=Number.parseInt(n);return Number.isFinite(i)?i:t}static parseString(n,t=""){return n instanceof String?n:n&&n.toString instanceof Function?n.toString():t}});rs.mimic.DataProvider=(class n{static EMPTY_DATA={d:{cnlNum:0,val:0,stat:0},df:{dispVal:"",colors:[]}};curDataMap=null;prevDataMap=null;getCurData(){return n.EMPTY_DATA}getPrevData(){return n.EMPTY_DATA}static dataEqual(n,t){return n.d.val===t.d.val&&n.d.stat===t.d.stat}static getFieldValue(n,t,i){const r=rs.mimic.DataMember;switch(t){case r.VALUE:return n.d.val;case r.STATUS:return n.d.stat;case r.DISPLAY_VALUE:return n.df.dispVal;case r.DISPLAY_VALUE_WITH_UNIT:return i&&n.d.stat>0?n.df.dispVal+" "+i:n.df.dispVal;case r.COLOR0:return n.df.colors.length>0?n.df.colors[0]:"";case r.COLOR1:return n.df.colors.length>1?n.df.colors[1]:"";case r.COLOR2:return n.df.colors.length>2?n.df.colors[2]:"";default:return null}}});rs.mimic.Renderer=(class{_setBackgroundImage(n,t){n.css("background-image",this._imageToDataUrlCss(t))}_setBorder(n,t){t.width>0?n.css({"border-width":t.width,"border-style":"solid","border-color":t.color}):n.css("border","none")}_setCornerRadius(n,t){n.css({"border-top-left-radius":t.topLeft,"border-top-right-radius":t.topRight,"border-bottom-right-radius":t.bottomRight,"border-bottom-left-radius":t.bottomLeft})}_setFont(n,t,i){t.inherit?n.css({"font-family":"","font-size":"","font-weight":"","font-style":"","text-decoration":""}):n.css({"font-family":i?.get(t.name)?.family,"font-size":t.size,"font-weight":t.bold?"bold":"normal","font-style":t.italic?"italic":"normal","text-decoration":t.underline?"underline":"none"})}_setLocation(n,t){n.css({left:t.x+"px",top:t.y+"px"})}_setPadding(n,t){n.css({"padding-top":t.top,"padding-right":t.right,"padding-bottom":t.bottom,"padding-left":t.left})}_setSize(n,t){n.css({width:t.width+"px",height:t.height+"px"})}_imageToDataUrlCss(n){return n?"url('"+n.dataUrl+"')":""}createDom(){return null}updateDom(){return null}setSize(n,t,i){n.dom&&this._setSize(n.dom,{width:t,height:i})}getSize(n){return n.dom?{width:parseInt(n.dom.outerWidth()),height:parseInt(n.dom.outerHeight())}:{width:0,height:0}}appendChild(n,t){n.dom&&t.dom&&n.dom.append(t.dom)}detach(n){n.dom?.detach()}remove(n){n.dom?.remove()}static arrangeChildren(n){if(n&&n.children){for(let t of n.children)t.renderer?.detach(t);for(let t of n.children)n.renderer?.appendChild(n,t)}}});rs.mimic.MimicRenderer=(class n extends rs.mimic.Renderer{static _GRID_COLOR="#dee2e6";static _createGrid(t,i){let f=$("<canvas class='grid'><\/canvas>"),u=f[0],e=u.width=i.width,o=u.height=i.height,r=u.getContext("2d");return r.lineWidth=1,r.strokeStyle=n._GRID_COLOR,n._drawGrid(r,e,o,t,[1,1]),n._drawGrid(r,e,o,t*10),f}static _drawGrid(n,t,i,r,u=[]){const f=.5;for(let e=r;e<t;e+=r)n.beginPath(),n.setLineDash(u),n.moveTo(e+f,0),n.lineTo(e+f,i),n.stroke();for(let e=r;e<i;e+=r)n.beginPath(),n.setLineDash(u),n.moveTo(0,e+f),n.lineTo(t,e+f),n.stroke()}static _calcScaleValue(n,t){const i=rs.mimic.ScaleType;if(t.type===i.NUMERIC){if(t.value>=0)return t.value}else{let r=n.dom?.parent();if(r&&n.width>0&&n.height>0){let f=r.innerWidth(),u=f/n.width;if(t.type===i.FIT_WIDTH)return u;if(t.type===i.FIT_SCREEN){let t=r.innerHeight(),i=t/n.height;return Math.min(u,i)}}}return 1}_setProps(n,t,i){let r=t.document;this._setBackgroundImage(n,i.getImage(r.backgroundImage));this._setFont(n,r.font,i.fontMap);this._setSize(n,r.size);this._setStyle(r.stylesheet);i.editMode||$("body").css("background-color",r.backColor);n.attr("title",r.tooltip).css({"background-color":r.backColor,"background-repeat":"no-repeat","background-size":r.size.width+"px "+r.size.height+"px",color:r.foreColor})}_setStyle(n){if(n){let t=$("<style id='mimic-style'><\/style>").html(n),i=$("head").find("#mimic-style");i.length>0?i.replaceWith(t):$("head").append(t)}else $("head").find("#mimic-style").remove()}createDom(t,i){let r=$("<div class='mimic'><\/div>");return i.editMode&&i.editorOptions&&i.editorOptions.showGrid&&i.editorOptions.gridStep>1&&r.append(n._createGrid(i.editorOptions.gridStep,t.document.size)),this._setProps(r,t,i),t.dom=r,r}updateDom(n,t){let i=n.dom;return i&&this._setProps(i,n,t),i}setScale(t,i){if(t.dom){let r=n._calcScaleValue(t,i);i.type!==rs.mimic.ScaleType.NUMERIC&&i.setValue(r);t.dom.css({transform:`scale(${i.value})`})}}});rs.mimic.ComponentRenderer=(class extends rs.mimic.Renderer{get canUpdateDom(){return!0}_setClasses(n,t,i){n.removeClass();n.addClass("comp");i.editMode&&(!i.faceplateMode&&t.isContainer&&n.addClass("container"),t.isSelected&&n.addClass("selected"))}_setProps(n,t){let i=t.properties;this._setLocation(n,i.location);this._setSize(n,i.size);n.css({"background-color":i.backColor,color:i.foreColor})}createDom(n,t){let i=$("<div><\/div>").attr("id","comp"+t.idPrefix+n.id).attr("data-id",n.id);return this._setClasses(i,n,t),this._setProps(i,n,t),n.dom=i,i}updateDom(n,t){let i=n.dom;return i&&(this._setClasses(i,n,t),this._setProps(i,n,t)),i}setLocation(n,t,i){n.dom&&this._setLocation(n.dom,{x:t,y:i})}getLocation(n){if(n.dom){let t=n.dom.position();return{x:parseInt(t.left),y:parseInt(t.top)}}return{x:0,y:0}}updateLocation(n){n.dom&&this._setLocation(n.dom,n.properties.location)}updateSelected(n){n.dom&&n.dom.toggleClass("selected",n.isSelected)}allowResizing(){return!0}});rs.mimic.RegularComponentRenderer=(class extends rs.mimic.ComponentRenderer{_setClasses(n,t,i){super._setClasses(n,t,i);let r=t.properties;r.cssClass&&n.addClass(r.cssClass)}_setProps(n,t,i){super._setProps(n,t,i);let r=t.properties;this._setBorder(n,r.border);this._setCornerRadius(n,r.cornerRadius);n.attr("title",r.tooltip)}});rs.mimic.TextRenderer=(class extends rs.mimic.RegularComponentRenderer{_setClasses(n,t,i){super._setClasses(n,t,i);n.addClass("text")}_setProps(n,t,i){super._setProps(n,t,i);let r=t.properties;this._setFont(n,r.font,i.fontMap);this._setPadding(n,r.padding);n.text(r.text)}});rs.mimic.PictureRenderer=(class extends rs.mimic.RegularComponentRenderer{_setClasses(n,t,i){super._setClasses(n,t,i);n.addClass("picture")}_setProps(n,t,i){super._setProps(n,t,i);let r=t.properties;this._setBackgroundImage(n,i.getImage(r.imageName))}});rs.mimic.PanelRenderer=(class extends rs.mimic.RegularComponentRenderer{_setClasses(n,t,i){super._setClasses(n,t,i);n.addClass("panel")}});rs.mimic.FaceplateRenderer=(class extends rs.mimic.ComponentRenderer{_setClasses(n,t,i){super._setClasses(n,t,i);n.addClass("faceplate")}});rs.mimic.RenderContext=(class{editMode=false;fontMap=null;editorOptions=null;controlRight=false;faceplateMode=false;imageMap=null;idPrefix="";unknownTypes=null;constructor(n){Object.assign(this,n)}getImage(n){return this.imageMap instanceof Map?this.imageMap.get(n):null}});rs.mimic.RendererSet=(class{static mimicRenderer=new rs.mimic.MimicRenderer;static faceplateRenderer=new rs.mimic.FaceplateRenderer;static componentRenderers=new Map([["Text",new rs.mimic.TextRenderer],["Picture",new rs.mimic.PictureRenderer],["Panel",new rs.mimic.PanelRenderer]]);});rs.mimic.UnitedRenderer=(class{mimic;editMode;fontMap=null;editorOptions=null;controlRight=false;constructor(n,t){this.mimic=n;this.editMode=t}_createRenderContext(n){return new rs.mimic.RenderContext({editMode:this.editMode,fontMap:this.fontMap,editorOptions:this.editorOptions,controlRight:this.controlRight,imageMap:this.mimic.imageMap,unknownTypes:n?new Set:null})}_createFaceplateContext(n,t){return new rs.mimic.RenderContext({editMode:this.editMode,fontMap:this.fontMap,editorOptions:this.editorOptions,controlRight:this.controlRight,faceplateMode:!0,imageMap:n.model?.imageMap,idPrefix:t.idPrefix,unknownTypes:t.unknownTypes})}_appendToParent(n){n.parent?.renderer&&n.parent.renderer.appendChild(n.parent,n)}_createComponentDom(n,t){if(n.isFaceplate)this._createFaceplateDom(n,t);else{let i=rs.mimic.RendererSet.componentRenderers.get(n.typeName);i?(n.renderer=i,i.createDom(n,t),this._appendToParent(n)):t.unknownTypes?.add(n.typeName)}}_createFaceplateDom(n,t){if(!n.model){t.unknownTypes?.add(n.typeName);return}let i=this._createFaceplateContext(n,t),r=rs.mimic.RendererSet.faceplateRenderer;n.renderer=r;r.createDom(n,i);this._appendToParent(n);i.idPrefix+=n.id+"-";for(let t of n.components)this._createComponentDom(t,i)}_updateComponentDom(n,t){if(n.dom&&n.renderer)if(n.isFaceplate)this._updateFaceplateDom(n,t);else if(n.renderer.canUpdateDom)n.renderer.updateDom(n,t);else{let i=n.dom;n.renderer.createDom(n,t);i.replaceWith(n.dom)}}_updateFaceplateDom(n,t){if(n.model&&n.dom&&n.renderer){let i=this._createFaceplateContext(n,t);n.renderer.updateDom(n,i);i.idPrefix+=n.id+"-";for(let t of n.components)this._updateComponentDom(t,i)}}configure({fonts:i=null,editorOptions:t=null,controlRight:n=false}){this.fontMap=Array.isArray(i)?new Map(i.map(n=>[n.name,n])):null;this.editorOptions=t;this.controlRight=n}createMimicDom(){let i=Date.now(),n=this._createRenderContext(!0),t=rs.mimic.RendererSet.mimicRenderer;this.mimic.renderer=t;t.createDom(this.mimic,n);for(let t of this.mimic.components)this._createComponentDom(t,n);return n.unknownTypes.size>0&&console.warn("Unable to render components of types: "+Array.from(n.unknownTypes).sort().join(", ")),this.mimic.dom?(console.info("Mimic DOM created in "+(Date.now()-i)+" ms"),this.mimic.dom):(console.warn("Unable to create mimic DOM"),$())}updateMimicDom(){rs.mimic.RendererSet.mimicRenderer.updateDom(this.mimic,this._createRenderContext())}createComponentDom(n){return this._createComponentDom(n,this._createRenderContext()),n.dom??$()}updateComponentDom(n){this._updateComponentDom(n,this._createRenderContext())}updateData(n){let t=this._createRenderContext();for(let i of this.mimic.components)try{rs.mimic.MimicHelper.updateData(i,n)&&this._updateComponentDom(i,t)}catch(r){console.error("Error updating data of the component with ID "+i.id+" of type "+i.typeName)}}});