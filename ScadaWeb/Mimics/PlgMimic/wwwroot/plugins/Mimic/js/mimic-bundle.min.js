var rs=rs??{};rs.mimic=rs.mimic??{};rs.mimic.LoadStep=(class{static UNDEFINED=0;static PROPERTIES=1;static COMPONENTS=2;static IMAGES=3;static FACEPLATES=4;static COMPLETE=5;});rs.mimic.LoadResult=(class{ok=false;msg="";});rs.mimic.LoadContext=(class{static COMPONENTS_TO_REQUEST=1e3;static IMAGES_TO_REQUEST=100;static IMAGE_TOTAL_SIZE=1048576;controllerUrl="";mimicKey="";result=new rs.mimic.LoadResult;step=rs.mimic.LoadStep.UNDEFINED;componentIndex=0;imageIndex=0;faceplateIndex=0;constructor(n,t){this.controllerUrl=n;this.mimicKey=t.toString()}});rs.mimic.ComponentFactory=(class{createComponent(n){let t=new rs.mimic.Component;return t.typeName=n,t.properties={blinking:!1,enabled:!0,visible:!0,deviceNum:0,inCnlNum:0,objNum:0,outCnlNum:0,propertyBindings:[],location:new rs.mimic.Location,size:new rs.mimic.Size},t}createComponentFromSource(n){const i=rs.mimic.PropertyParser;let r=new rs.mimic.Component,t=n.properties??{};return r.typeName=n.typeName,r.properties={blinking:i.parseBool(t.blinking),enabled:i.parseBool(t.enabled),visible:i.parseBool(t.visible),deviceNum:i.parseInt(t.deviceNum),inCnlNum:i.parseInt(t.inCnlNum),objNum:i.parseInt(t.objNum),outCnlNum:i.parseInt(t.outCnlNum),propertyBindings:i.parsePropertyBindings(t.propertyBindings),location:rs.mimic.Location.parse(t.location),size:rs.mimic.Size.parse(t.size)},r}});rs.mimic.RegularComponentFactory=(class extends rs.mimic.ComponentFactory{createComponent(n){let t=super.createComponent(n);return Object.assign(t.properties,{backColor:"",border:new rs.mimic.Border,cornerRadius:new rs.mimic.CornerRadius,cssClass:"",foreColor:""}),Object.assign(t.properties,{blinkingState:new rs.mimic.VisualState,clickAction:new rs.mimic.Action,disabledState:new rs.mimic.VisualState,hoverState:new rs.mimic.VisualState,script:"",tooltip:""}),t}createComponentFromSource(n){const i=rs.mimic.PropertyParser;let r=super.createComponentFromSource(n),t=n.properties??{};return Object.assign(r.properties,{backColor:i.parseString(t.backColor),border:rs.mimic.Border.parse(t.border),cornerRadius:rs.mimic.CornerRadius.parse(t.cornerRadius),cssClass:i.parseString(t.cssClass),foreColor:i.parseString(t.foreColor)}),Object.assign(r.properties,{blinkingState:rs.mimic.VisualState.parse(t.blinkingState),clickAction:rs.mimic.Action.parse(t.clickAction),disabledState:rs.mimic.VisualState.parse(t.disabledState),hoverState:rs.mimic.VisualState.parse(t.hoverState),script:i.parseString(t.script),tooltip:i.parseString(t.tooltip)}),r}});rs.mimic.TextFactory=(class extends rs.mimic.RegularComponentFactory{createComponent(){let n=super.createComponent("Text");return Object.assign(n.properties,{font:new rs.mimic.Font,text:"Text",textAlign:rs.mimic.ContentAlignment.TOP_LEFT,wordWrap:!1}),Object.assign(n.properties,{autoSize:!1,padding:new rs.mimic.Padding}),n}createComponentFromSource(n){const i=rs.mimic.PropertyParser;let r=super.createComponentFromSource(n),t=n.properties??{};return Object.assign(r.properties,{font:rs.mimic.Font.parse(t.font),text:i.parseString(t.text,"Text"),textAlign:i.parseString(t.textAlign,rs.mimic.ContentAlignment.TOP_LEFT),wordWrap:i.parseBool(t.wordWrap)}),Object.assign(r.properties,{autoSize:i.parseBool(t.autoSize),padding:rs.mimic.Padding.parse(t.padding)}),r}});rs.mimic.PictureFactory=(class extends rs.mimic.RegularComponentFactory{createComponent(){let n=super.createComponent("Picture");return Object.assign(n.properties,{imageName:""}),Object.assign(n.properties,{conditions:[],sizeMode:rs.mimic.ImageSizeMode.NORMAL}),Object.assign(n.properties,{padding:new rs.mimic.Padding}),n}createComponentFromSource(n){const r=rs.mimic.PropertyParser;let t=super.createComponentFromSource(n),i=n.properties??{};return Object.assign(t.properties,{imageName:r.parseString(i.imageName)}),Object.assign(t.properties,{conditions:r.parseImageConditions(i.conditions),sizeMode:r.parseString(i.sizeMode,rs.mimic.ImageSizeMode.NORMAL)}),Object.assign(t.properties,{padding:rs.mimic.Padding.parse(i.padding)}),t}});rs.mimic.PanelFactory=(class extends rs.mimic.RegularComponentFactory{createComponent(){let n=super.createComponent("Panel");return n.children=[],n}});rs.mimic.FaceplateFactory=(class{static createComponent(n){let t=new rs.mimic.FaceplateInstance;return t.typeName=n.typeName,t.properties={location:{x:"0",y:"0"}},t.applyModel(n),t}});rs.mimic.FactorySet=(class{static componentFactories=new Map([["Text",new rs.mimic.TextFactory],["Picture",new rs.mimic.PictureFactory],["Panel",new rs.mimic.PanelFactory]]);static getFaceplateFactory(n){return{createComponent:function(){return rs.mimic.FaceplateFactory.createComponent(n)}}}});rs.mimic.MimicHelper=(class n{static _indexComponents(n,t){for(let i=t??0;i<n.children.length;i++){let t=n.children[i];t.index=i}}static defineNesting(n,t,i){let r=i??new Map(t.map(n=>[n.id,n]));for(let i of t)if(i.parentID>0){let n=r.get(i.parentID);n&&(n.children??=[],i.index=n.children.length,i.parent=n,n.children.push(i))}else n.children??=[],i.index=n.children.length,i.parent=n,n.children.push(i)}static addToParent(t,i,r){if(t.children){i.parentID=t.id??0;let u=Number.isInteger(r)&&0<=r&&r<t.children.length?r:t.children.length;i.parent=t;t.children.splice(u,0,i);n._indexComponents(t,u)}}static removeFromParent(t){let i=t.parent;i.children&&t.index>=0&&(i.children.splice(t.index,1),n._indexComponents(i,t.index),t.index=-1)}static areRelatives(n,t){let i=t.parent;while(i){if(i===n)return!0;i=i.parent}return!1}static areSiblings(n){let t=new Set(n.map(n=>n.parentID));return t.size===1}static sendToBack(t,i){if(t.children){let r=new Set(i.map(n=>n.id));t.children=t.children.filter(n=>!r.has(n.id));t.children.unshift(...i);n._indexComponents(t)}}static sendBackward(n,t){if(n.children){let r=t.map(n=>n.index).sort(),i=-1;for(let t of r)if(t>=0&&i<t-1){i=t-1;let r=n.children[t],u=n.children[i];n.children[t]=u;n.children[i]=r;r.index--;u.index++}else i=t}}static bringForward(n,t){if(n.children){let r=t.map(n=>n.index).sort(),i=n.children.length;for(let t=r.length-1;t>=0;t--){let u=r[t];if(u>=0&&i>u+1){i=u+1;let t=n.children[u],r=n.children[i];n.children[u]=r;n.children[i]=t;t.index++;r.index--}else i=u}}}static bringToFront(t,i){if(t.children){let r=new Set(i.map(n=>n.id));t.children=t.children.filter(n=>!r.has(n.id));t.children.push(...i);n._indexComponents(t)}}static placeBefore(t,i,r){if(t.children){let e=new Set(i.map(n=>n.id)),u=t.children.filter(n=>!e.has(n.id)),f=u.indexOf(r);f>=0&&(u.splice(f,0,...i),t.children=u,n._indexComponents(t))}}static placeAfter(t,i,r){if(t.children){let e=new Set(i.map(n=>n.id)),u=t.children.filter(n=>!e.has(n.id)),f=u.indexOf(r);f>=0&&(u.splice(f+1,0,...i),t.children=u,n._indexComponents(t))}}static arrange(n,t,i){if(n.children&&t.length===i.length){let f=new Map,e=new Set;for(let n=0;n<t.length;n++){let r=t[n];f.set(i[n],r);e.add(r.id)}let u=[],r=0,o=0,s=n.children.length;while(r<s&&o<s){let t=f.get(r);t?(t.index=r++,u.push(t)):(t=n.children[o++],e.has(t.id)||(t.index=r++,u.push(t)))}n.children=u}}static getMinLocation(n){let t=NaN,i=NaN;for(let r of n){let n=r.x,u=r.y;(isNaN(t)||t>n)&&(t=n);(isNaN(i)||i>u)&&(i=u)}return{x:t,y:i}}});rs.mimic.MimicBase=(class{dependencies;document;components;images;faceplates;dependencyMap;componentMap;imageMap;faceplateMap;children;clear(){this.dependencies=[];this.document={};this.components=[];this.images=[];this.faceplates=[];this.dependencyMap=new Map;this.componentMap=new Map;this.imageMap=new Map;this.faceplateMap=new Map;this.children=[]}createComponent(n){return this.dependencyMap?.has(n.typeName)?new rs.mimic.FaceplateInstance(n):new rs.mimic.Component(n)}copyComponent(n){return n instanceof rs.mimic.Component&&(n=n.toPlainObject()),this.createComponent(ScadaUtils.deepClone(n))}});rs.mimic.Mimic=(class extends rs.mimic.MimicBase{dom;renderer;get id(){return 0}get isContainer(){return!0}async _loadPart(n){const i=rs.mimic.LoadStep;let r=!1,t=null;n.step===i.UNDEFINED&&(n.step=i.PROPERTIES,n.result.msg="Not completed.");switch(n.step){case i.PROPERTIES:t=await this._loadProperties(n);n.step++;break;case i.COMPONENTS:t=await this._loadComponents(n);t.ok&&t.data.endOfComponents&&n.step++;break;case i.IMAGES:t=await this._loadImages(n);t.ok&&t.data.endOfImages&&n.step++;break;case i.FACEPLATES:if(this.dependencies.length>0){let i=this.dependencies[n.faceplateIndex];i.hasError?r=!0:t=await this._loadFaceplate(n,i.typeName);++n.faceplateIndex>=this.dependencies.length&&n.step++}else n.step++,r=!0;break;case i.COMPLETE:n.result.ok=!0;n.result.msg="";break;default:t=Dto.fail("Unknown loading step.")}return t!==null&&(t.ok?t.data.mimicKey===n.mimicKey?r=!0:n.result.msg="Stamp mismatch.":n.result.msg=t.msg),r}async _loadProperties(n){console.log(ScadaUtils.getCurrentTime()+" Load mimic properties");let t=await fetch(n.controllerUrl+"GetMimicProperties?key="+n.mimicKey);if(t.ok){let n=await t.json();if(n.ok){if(Array.isArray(n.data.dependencies))for(let t of n.data.dependencies){let n=new rs.mimic.FaceplateMeta(t);this.dependencies.push(n);this.dependencyMap.set(n.typeName,n)}this.document=n.data.document||{}}return n}return Dto.fail(t.statusText)}async _loadComponents(n){console.log(ScadaUtils.getCurrentTime()+" Load components starting with "+n.componentIndex);let t=await fetch(n.controllerUrl+"GetComponents?key="+n.mimicKey+"&index="+n.componentIndex+"&count="+rs.mimic.LoadContext.COMPONENTS_TO_REQUEST);if(t.ok){let i=await t.json();if(i.ok&&Array.isArray(i.data.components)){n.componentIndex+=i.data.components.length;for(let n of i.data.components){let t=this.createComponent(n);this.components.push(t);this.componentMap.set(t.id,t)}}return i}return Dto.fail(t.statusText)}async _loadImages(n){console.log(ScadaUtils.getCurrentTime()+" Load images starting with "+n.imageIndex);let t=await fetch(n.controllerUrl+"GetImages?key="+n.mimicKey+"&index="+n.imageIndex+"&count="+rs.mimic.LoadContext.COMPONENTS_TO_REQUEST+"&size="+rs.mimic.LoadContext.IMAGE_TOTAL_SIZE);if(t.ok){let i=await t.json();if(i.ok&&Array.isArray(i.data.images)){n.imageIndex+=i.data.images.length;for(let n of i.data.images){let t=new rs.mimic.Image(n);this.images.push(t);this.imageMap.set(t.name,t)}}return i}return Dto.fail(t.statusText)}async _loadFaceplate(n,t){console.log(ScadaUtils.getCurrentTime()+` Load '${t}' faceplate`);let i=await fetch(n.controllerUrl+"GetFaceplate?key="+n.mimicKey+"&typeName="+t);if(i.ok){let n=await i.json();if(n.ok){let i=new rs.mimic.Faceplate(n.data,t);this.faceplates.push(i);this.faceplateMap.set(t,i)}return n}return Dto.fail(i.statusText)}_defineNesting(){rs.mimic.MimicHelper.defineNesting(this,this.components,this.componentMap)}_prepareFaceplates(){for(let n of this.faceplates)for(let t of n.dependencies){let i=this.faceplateMap.get(t.typeName);i&&(n.faceplates.push(i),n.faceplateMap.set(t.typeName,i))}}_prepareFaceplateInstances(){for(let n of this.components)if(n.isFaceplate){let t=mimic.faceplateMap.get(n.typeName);t&&n.applyModel(t)}}clear(){super.clear();this.dom=null;this.renderer=null}async load(n,t){let r=Date.now();console.log(ScadaUtils.getCurrentTime()+" Load mimic with key "+t);this.clear();let i=new rs.mimic.LoadContext(n,t);while(await this._loadPart(i));return i.result.ok?(this._defineNesting(),this._prepareFaceplates(),this._prepareFaceplateInstances(),console.info(ScadaUtils.getCurrentTime()+" Mimic loading completed successfully in "+(Date.now()-r)+" ms")):console.error(ScadaUtils.getCurrentTime()+" Mimic loading failed: "+i.result.msg),i.result}addDependency(n){let t=this.dependencyMap.get(n.typeName);if(t){let i=this.dependencies.indexOf(t);this.dependencies[i]=n}else this.dependencies.push(n);this.dependencies.sort();this.dependencyMap.set(n.typeName,n)}removeDependency(n){let t=this.dependencyMap.get(n);if(t){let i=this.dependencies.indexOf(t);this.dependencies.splice(i,1);this.dependencyMap.delete(n)}}addImage(n){let t=this.imageMap.get(n.name);if(t){let i=this.images.indexOf(t);this.images[i]=n}else this.images.push(n);this.images.sort();this.imageMap.set(n.name,n)}removeImage(n){let t=this.imageMap.get(n);if(t){let i=this.images.indexOf(t);this.images.splice(i,1);this.imageMap.delete(n)}}addComponent(n,t,i,r,u){return!n||!t||!t.isContainer||n.id<=0||this.componentMap.has(n.id)?!1:(r&&u&&n.setLocation(r,u),rs.mimic.MimicHelper.addToParent(t,n,i),this.components.push(n),this.componentMap.set(n.id,n),!0)}updateParent(n,t,i,r,u){return!n||!t||!t.isContainer||n===t||rs.mimic.MimicHelper.areRelatives(n,t)?!1:(r&&u&&n.setLocation(r,u),rs.mimic.MimicHelper.removeFromParent(n),rs.mimic.MimicHelper.addToParent(t,n,i),!0)}removeComponent(n){let t=this.componentMap.get(n);if(t){let i=new Set;if(i.add(n),t.isContainer)for(let n of t.getAllChildren())i.add(n.id);this.components=this.components.filter(n=>!i.has(n.id));rs.mimic.MimicHelper.removeFromParent(t);for(let n of i)this.componentMap.delete(n)}return t}getComponentParent(n){return n>0?this.componentMap.get(n):this}toString(){return"Mimic"}});rs.mimic.Component=(class{id=0;name="";typeName="";properties=null;bindings=null;access=null;parentID=0;index=-1;parent=null;children=null;dom=null;renderer=null;isSelected=false;constructor(n){Object.assign(this,n)}get isContainer(){return Array.isArray(this.children)}get isFaceplate(){return!1}get displayName(){return this.name?`[${this.id}] ${this.name} - ${this.typeName}`:`[${this.id}] ${this.typeName}`}get x(){return parseInt(this.properties?.location?.x)||0}set x(n){this.properties?.location&&(this.properties.location.x=n.toString())}get y(){return parseInt(this.properties?.location?.y)||0}set y(n){this.properties?.location&&(this.properties.location.y=n.toString())}get width(){return parseInt(this.properties?.size?.width)||0}set width(n){this.properties?.size&&(this.properties.size.width=n.toString())}get height(){return parseInt(this.properties?.size?.height)||0}set height(n){this.properties?.size&&(this.properties.size.height=n.toString())}setLocation(n,t){this.properties&&(this.properties.location={x:n.toString(),y:t.toString()})}setSize(n,t){this.properties&&(this.properties.size={width:n.toString(),height:t.toString()})}getAllChildren(){function t(i){if(i.isContainer)for(let r of i.children)n.push(r),t(r)}let n=[];return t(this),n}toPlainObject(){return{id:this.id,name:this.name,typeName:this.typeName,properties:this.properties,bindings:this.bindings,access:this.access,parentID:this.parentID,index:this.index,children:this.children?[]:null}}toString(){return this.displayName}});rs.mimic.Image=(class{name="";mediaType="";data=null;constructor(n){Object.assign(this,n)}get dataUrl(){return this.data?`data:${this.mediaType};base64,${this.data}`:""}set dataUrl(n){if(n&&n.startsWith("data:")){let t=n.indexOf(";base64,");if(t>=0){this.mediaType=n.substring(5,t);this.data=n.substring(t+8);return}}this.data=null}toString(){return this.name}});rs.mimic.FaceplateMeta=(class{typeName="";path="";isTransitive=false;hasError=false;constructor(n){Object.assign(this,n)}toString(){return this.typeName}});rs.mimic.Faceplate=(class extends rs.mimic.MimicBase{typeName="";constructor(n,t){if(super(),this.clear(),this.document=n.document??{},this.typeName=t,Array.isArray(n.dependencies))for(let t of n.dependencies){let n=new rs.mimic.FaceplateMeta(t);this.dependencies.push(n);this.dependencyMap.set(n.typeName,n)}if(Array.isArray(n.components))for(let t of n.components){let n=this.createComponent(t);this.components.push(n);this.componentMap.set(n.id,n)}if(Array.isArray(n.images))for(let t of n.images){let n=new rs.mimic.Image(t);this.images.push(n);this.imageMap.set(n.name,n)}}});rs.mimic.FaceplateInstance=(class extends rs.mimic.Component{model=null;components=null;get isContainer(){return!1}get isFaceplate(){return!0}applyModel(n){if(n instanceof rs.mimic.Faceplate){this.properties??={};this.properties.size??=ScadaUtils.deepClone(n.document.size);this.model=n;this.components=[];for(let t of n.components){let i=n.copyComponent(t);if(i.parent=this,this.components.push(i),i.isFaceplate){let t=n.faceplateMap.get(i.typeName);i.applyModel(t)}}rs.mimic.MimicHelper.defineNesting(this,this.components)}}});rs.mimic.ActionType=(class{static NONE="None";static DRAW_CHART="DrawChart";static SEND_COMMAND="SendCommand";static OPEN_LINK="OpenLink";static EXECUTE_SCRIPT="ExecuteScript";});rs.mimic.ComparisonOperator=(class{static NONE="None";static EQUAL="Equal";static NOT_EQUAL="NotEqual";static LESS_THAN="LessThan";static LESS_THAN_EQUAL="LessThanEqual";static GREATER_THAN="GreaterThan";static GREATER_THAN_EQUAL="GreaterThanEqual";});rs.mimic.ImageSizeMode=(class{static NORMAL="Normal";static STRETCH="Stretch";static CENTER="Center";static ZOOM="Zoom";});rs.mimic.LogicalOperator=(class{static NONE="None";static AND="And";static OR="Or";});rs.mimic.LinkTarget=(class{static SELF="Self";static NEW_TAB="NewTab";static NEW_MODAL="NewModal";});rs.mimic.ModalWidth=(class{static NORMAL="Normal";static SMALL="Small";static LARGE="Large";static EXTRA_LARGE="ExtraLarge";});rs.mimic.ContentAlignment=(class{static TOP_LEFT="TopLeft";static TOP_CENTER="TopCenter";static TOP_RIGHT="TopRight";static MIDDLE_LEFT="MiddleLeft";static MIDDLE_CENTER="MiddleCenter";static MIDDLE_RIGHT="MiddleRight";static BOTTOM_LEFT="BottomLeft";static BOTTOM_CENTER="BottomCenter";static BOTTOM_RIGHT="BottomRight";});rs.mimic.Action=(class n{actionType=rs.mimic.ActionType.NONE;chartArgs="";commandArgs=new rs.mimic.CommandArgs;linkArgs=new rs.mimic.LinkArgs;script="";static parse(t){const r=rs.mimic.PropertyParser;let i=new n;return t&&(i.actionType=r.parseString(t.actionType,i.actionType),i.chartArgs=r.parseString(t.chartArgs),i.commandArgs=rs.mimic.CommandArgs.parse(t.commandArgs),i.linkArgs=rs.mimic.LinkArgs.parse(t.linkArgs),i.script=r.parseString(t.script)),i}});rs.mimic.Border=(class n{width=0;color="";static parse(t){const r=rs.mimic.PropertyParser;let i=new n;return t&&(i.width=r.parseInt(t.width),i.color=r.parseString(t.color)),i}});rs.mimic.CommandArgs=(class n{showDialog=true;cmdVal=0;cmdDataHex="";cmdDataStr="";static parse(t){const r=rs.mimic.PropertyParser;let i=new n;return t&&(i.showDialog=r.parseBool(t.showDialog,!0),i.cmdVal=r.parseFloat(t.commandArgs),i.cmdDataHex=r.parseString(t.cmdDataHex),i.cmdDataStr=r.parseString(t.cmdDataStr)),i}});rs.mimic.Condition=(class n{comparisonOper1=rs.mimic.ComparisonOperator.NONE;comparisonArg1=0;logicalOper=rs.mimic.LogicalOperator.NONE;comparisonOper2=rs.mimic.ComparisonOperator.NONE;comparisonArg2=0;_copyFrom(n){const t=rs.mimic.PropertyParser;this.comparisonOper1=t.parseString(n.comparisonOper1,this.comparisonOper1);this.comparisonArg1=t.parseFloat(n.comparisonArg1);this.logicalOper=t.parseString(n.logicalOper,this.logicalOper);this.comparisonOper2=t.parseString(n.comparisonOper2,this.comparisonOper2);this.comparisonArg2=t.parseFloat(n.comparisonArg2)}static parse(t){let i=new n;return t&&i._copyFrom(t),i}});rs.mimic.CornerRadius=(class n{topLeft=0;topRight=0;bottomRight=0;bottomLeft=0;static parse(t){const r=rs.mimic.PropertyParser;let i=new n;return t&&(i.topLeft=r.parseInt(t.topLeft),i.topRight=r.parseInt(t.topRight),i.bottomRight=r.parseInt(t.bottomRight),i.bottomLeft=r.parseInt(t.bottomLeft)),i}});rs.mimic.Font=(class n{name="";size=16;bold=false;italic=false;underline=false;static parse(t){const r=rs.mimic.PropertyParser;let i=new n;return t&&(i.name=r.parseString(t.name),i.size=r.parseInt(t.size,i.size),i.bold=r.parseBool(t.bold),i.italic=r.parseBool(t.italic),i.underline=r.parseBool(t.underline)),i}});rs.mimic.ImageCondition=(class n extends rs.mimic.Condition{imageName="";static parse(t){const r=rs.mimic.PropertyParser;let i=new n;return t&&(i.imageName=r.parseString(t.imageName),i._copyFrom(t)),i}});rs.mimic.LinkArgs=(class n{url="";target=rs.mimic.LinkTarget.SELF;viewID=0;modalWidth=rs.mimic.ModalWidth.NORMAL;modalHeight=0;static parse(t){const r=rs.mimic.PropertyParser;let i=new n;return t&&(i.url=r.parseString(t.url),i.target=r.parseString(t.target,i.target),i.viewID=r.parseInt(t.viewID),i.modalWidth=r.parseString(t.modalWidth,i.modalWidth),i.modalHeight=r.parseInt(t.modalHeight)),i}});rs.mimic.Location=(class n{x=0;y=0;static parse(t){const r=rs.mimic.PropertyParser;let i=new n;return t&&(i.x=r.parseInt(t.x),i.y=r.parseInt(t.y)),i}});rs.mimic.Padding=(class n{top=0;right=0;bottom=0;left=0;static parse(t){const r=rs.mimic.PropertyParser;let i=new n;return t&&(i.top=r.parseInt(t.top),i.right=r.parseInt(t.right),i.bottom=r.parseInt(t.bottom),i.left=r.parseInt(t.left)),i}});rs.mimic.PropertyAlias=(class{name="";path="";});rs.mimic.PropertyBinding=(class n{propertyName="";dataSource="";dataMember="";format="";static parse(t){const r=rs.mimic.PropertyParser;let i=new n;return t&&(i.propertyName=r.parseString(t.propertyName),i.dataSource=r.parseString(t.dataSource),i.dataMember=r.parseString(t.dataMember),i.format=r.parseString(t.format)),i}});rs.mimic.Size=(class n{width=100;height=100;static parse(t){const r=rs.mimic.PropertyParser;let i=new n;return t&&(i.width=r.parseInt(t.width),i.height=r.parseInt(t.height)),i}});rs.mimic.VisualState=(class n{backColor="";foreColor="";borderColor="";static parse(t){const r=rs.mimic.PropertyParser;let i=new n;return t&&(i.backColor=r.parseString(t.backColor),i.foreColor=r.parseString(t.foreColor),i.borderColor=r.parseString(t.borderColor)),i}});rs.mimic.PropertyParser=(class{static parseBool(n,t=false){return n?n==="true"||n==="True":t}static parseFloat(n,t=0){let i=Number.parseFloat(n);return Number.isFinite(i)?i:t}static parseInt(n,t=0){let i=Number.parseInt(n);return Number.isFinite(i)?i:t}static parseString(n,t=""){return n instanceof String?n:n&&n.toString instanceof Function?n.toString():t}static parseImageConditions(n){const i=rs.mimic.ImageCondition;let t=[];if(Array.isArray(n))for(let r of n)t.push(i.parse(r));return t}static parsePropertyBindings(n){const i=rs.mimic.PropertyBinding;let t=[];if(Array.isArray(n))for(let r of n)t.push(i.parse(r));return t}});rs.mimic.Renderer=(class{get canUpdateDom(){return!1}_setLocation(n,t){n.css({left:t.x+"px",top:t.y+"px"})}_setSize(n,t){n.css({width:t.width+"px",height:t.height+"px"})}_setBackgroundImage(n,t){n.css("background-image",this._imageToDataUrlCss(t))}_imageToDataUrlCss(n){return n?"url('"+n.dataUrl+"')":""}createDom(){return null}updateDom(){}update(){}setLocation(n,t,i){n.dom&&this._setLocation(n.dom,{x:t.toString(),y:i.toString()})}getLocation(n){if(n.dom){let t=n.dom.position();return{x:t.left.toString(),y:t.top.toString()}}return{x:"0",y:"0"}}setSize(n,t,i){n.dom&&this._setSize(n.dom,{width:t.toString(),height:i.toString()})}getSize(n){return n.dom?{width:n.dom.outerWidth().toString(),height:n.dom.outerHeight().toString()}:{width:"0",height:"0"}}static appendChild(n,t){n.dom&&t.dom&&n.dom.append(t.dom)}static detach(n){n.dom?.detach()}static remove(n){n.dom?.remove()}static arrangeChildren(n){if(n.children&&n.dom){for(let t of n.children)t.dom?.detach();for(let t of n.children)t.dom&&n.dom.append(t.dom)}}});rs.mimic.MimicRenderer=(class n extends rs.mimic.Renderer{static _GRID_COLOR="#dee2e6";get canUpdateDom(){return!0}static _createGrid(t,i){let f=$("<canvas class='grid'><\/canvas>"),u=f[0],e=u.width=i.width,o=u.height=i.height,r=u.getContext("2d");return r.lineWidth=1,r.strokeStyle=n._GRID_COLOR,n._drawGrid(r,e,o,t,[1,1]),n._drawGrid(r,e,o,t*10),f}static _drawGrid(n,t,i,r,u=[]){const f=.5;for(let e=r;e<t;e+=r)n.beginPath(),n.setLineDash(u),n.moveTo(e+f,0),n.lineTo(e+f,i),n.stroke();for(let e=r;e<i;e+=r)n.beginPath(),n.setLineDash(u),n.moveTo(0,e+f),n.lineTo(t,e+f),n.stroke()}createDom(t,i){let r=$("<div class='mimic'><\/div>");return t.dom=r,i.editMode&&i.editorOptions&&i.editorOptions.showGrid&&i.editorOptions.gridStep>1&&r.append(n._createGrid(i.editorOptions.gridStep,t.document.size)),this.updateDom(t,i),r}updateDom(n){if(n.dom){let t=n.dom.first();this._setSize(t,n.document.size)}}});rs.mimic.ComponentRenderer=(class extends rs.mimic.Renderer{createDom(n,t){let i=$("<div class='comp'><\/div>").attr("id","comp"+t.idPrefix+n.id).attr("data-id",n.id);return t.editMode&&(!t.faceplateMode&&n.isContainer&&i.addClass("container"),n.isSelected&&i.addClass("selected")),n.dom=i,i}updateLocation(n){n.dom&&this._setLocation(n.dom,n.properties.location)}updateSelected(n){n.dom&&n.dom.toggleClass("selected",n.isSelected)}allowResizing(){return!0}});rs.mimic.TextRenderer=(class extends rs.mimic.ComponentRenderer{createDom(n,t){let i=super.createDom(n,t),r=n.properties;return i.addClass("text").text(r.text),this._setLocation(i,r.location),this._setSize(i,r.size),i}});rs.mimic.PictureRenderer=(class extends rs.mimic.ComponentRenderer{createDom(n,t){let i=super.createDom(n,t),r=n.properties;return i.addClass("picture"),this._setLocation(i,r.location),this._setSize(i,r.size),this._setBackgroundImage(i,t.getImage(r.imageName)),i}});rs.mimic.PanelRenderer=(class extends rs.mimic.ComponentRenderer{get canUpdateDom(){return!0}createDom(n,t){let i=super.createDom(n,t);return i.addClass("panel"),this.updateDom(n,t),i}updateDom(n){if(n.dom){let t=n.dom.first(),i=n.properties;this._setLocation(t,i.location);this._setSize(t,i.size)}}});rs.mimic.FaceplateRenderer=(class extends rs.mimic.ComponentRenderer{get canUpdateDom(){return!0}createDom(n,t){let i=super.createDom(n,t);return i.addClass("faceplate"),this.updateDom(n,t),i}updateDom(n){if(n.dom){let t=n.dom.first(),i=n.properties;this._setLocation(t,i.location);this._setSize(t,i.size)}}});rs.mimic.RenderContext=(class{editMode=false;editorOptions=null;faceplateMode=false;imageMap=null;idPrefix="";constructor(n){Object.assign(this,n)}getImage(n){return this.imageMap instanceof Map?this.imageMap.get(n):null}});rs.mimic.RendererSet=(class{static mimicRenderer=new rs.mimic.MimicRenderer;static faceplateRenderer=new rs.mimic.FaceplateRenderer;static componentRenderers=new Map([["Text",new rs.mimic.TextRenderer],["Picture",new rs.mimic.PictureRenderer],["Panel",new rs.mimic.PanelRenderer]]);});rs.mimic.UnitedRenderer=(class{mimic;editMode;editorOptions;constructor(n,t){this.mimic=n;this.editMode=t;this.editorOptions=null}_appendToParent(n){n.parent&&rs.mimic.Renderer.appendChild(n.parent,n)}_createComponentDom(n,t,i){if(n.isFaceplate)this._createFaceplateDom(n,t,i);else{let r=rs.mimic.RendererSet.componentRenderers.get(n.typeName);r?(n.renderer=r,r.createDom(n,t),this._appendToParent(n)):i?.add(n.typeName)}}_createFaceplateDom(n,t,i){if(!n.model){i?.add(n.typeName);return}let r=new rs.mimic.RenderContext({editMode:this.editMode,editorOptions:this.editorOptions,faceplateMode:!0,imageMap:n.model.imageMap,idPrefix:t.idPrefix}),u=rs.mimic.RendererSet.faceplateRenderer;n.renderer=u;u.createDom(n,r);this._appendToParent(n);r.idPrefix+=n.id+"-";for(let t of n.components)this._createComponentDom(t,r,i)}createMimicDom(){let r=Date.now(),n=new Set,t=new rs.mimic.RenderContext({editMode:this.editMode,editorOptions:this.editorOptions,imageMap:this.mimic.imageMap}),i=rs.mimic.RendererSet.mimicRenderer;this.mimic.renderer=i;i.createDom(this.mimic,t);for(let i of this.mimic.components)this._createComponentDom(i,t,n);return n.size>0&&console.warn("Unknown component types: "+Array.from(n).sort().join(", ")),this.mimic.dom?(console.info("Mimic DOM created in "+(Date.now()-r)+" ms"),this.mimic.dom):$()}updateMimicDom(){rs.mimic.RendererSet.mimicRenderer.updateDom(this.mimic)}createComponentDom(n){return this._createComponentDom(n,new rs.mimic.RenderContext({editMode:this.editMode,editorOptions:this.editorOptions,imageMap:this.mimic.imageMap})),n.dom??$()}updateComponentDom(n){if(n.dom&&n.renderer){let t=new rs.mimic.RenderContext({editMode:this.editMode,editorOptions:this.editorOptions});if(n.isFaceplate)t.faceplateMode=!0,t.imageMap=n.model.imageMap,n.renderer.updateDom(n,t);else if(t.imageMap=mimic.imageMap,n.renderer.canUpdateDom)n.renderer.updateDom(n,t);else{let i=n.dom;n.renderer.createDom(n,t);i.replaceWith(n.dom)}}}arrangeChildren(n){if(n.children){for(let t of n.children)t.dom&&t.dom.detach();for(let t of n.children)this._appendToParent(t)}}});