function registerBasicDescriptors(){let n=rs.mimic.DescriptorSet.componentDescriptors;n.set("BasicButton",new rs.mimic.BasicButtonDescriptor);n.set("BasicLed",new rs.mimic.BasicLedDescriptor);n.set("BasicToggle",new rs.mimic.BasicToggleDescriptor);let t=rs.mimic.DescriptorSet.structureDescriptors;t.set("BasicColorCondition",new rs.mimic.BasicColorConditionDescriptor)}function registerBasicFactories(){let n=rs.mimic.FactorySet.componentFactories;n.set("BasicButton",new rs.mimic.BasicButtonFactory);n.set("BasicLed",new rs.mimic.BasicLedFactory);n.set("BasicToggle",new rs.mimic.BasicToggleFactory)}function registerBasicRenderers(){let n=rs.mimic.RendererSet.componentRenderers;n.set("BasicButton",new rs.mimic.BasicButtonRenderer);n.set("BasicLed",new rs.mimic.BasicLedRenderer);n.set("BasicToggle",new rs.mimic.BasicToggleRenderer)}rs.mimic.BasicSubtype=(class{static TOGGLE_POSITION="BasicTogglePosition";static COLOR_CONDITION="BasicColorCondition";});rs.mimic.BasicButtonDescriptor=(class extends rs.mimic.RegularComponentDescriptor{constructor(){super();const n=rs.mimic.KnownCategory,t=rs.mimic.BasicType,r=rs.mimic.Subtype,u=rs.mimic.PropertyEditor,i=rs.mimic.PropertyDescriptor;this.add(new i({name:"imageName",displayName:"Image",category:n.APPEARANCE,type:t.STRING,editor:u.IMAGE_DIALOG}));this.add(new i({name:"imageSize",displayName:"Image size",category:n.APPEARANCE,type:t.STRUCT,subtype:r.SIZE}));this.add(new i({name:"text",displayName:"Text",category:n.APPEARANCE,type:t.STRING}))}});rs.mimic.BasicLedDescriptor=(class extends rs.mimic.RegularComponentDescriptor{constructor(){super();const n=rs.mimic.KnownCategory,t=rs.mimic.BasicType,r=rs.mimic.BasicSubtype,u=rs.mimic.PropertyEditor,i=rs.mimic.PropertyDescriptor;this.add(new i({name:"borderOpacity",displayName:"Border opacity",category:n.APPEARANCE,type:t.INT}));this.add(new i({name:"isSquare",displayName:"Square",category:n.APPEARANCE,type:t.BOOL}));this.add(new i({name:"conditions",displayName:"Conditions",category:n.BEHAVIOR,type:t.LIST,subtype:r.COLOR_CONDITION}));this.add(new i({name:"defaultColor",displayName:"Default color",category:n.BEHAVIOR,type:t.STRING,editor:u.COLOR_DIALOG}))}});rs.mimic.BasicToggleDescriptor=(class extends rs.mimic.RegularComponentDescriptor{constructor(){super();const n=rs.mimic.KnownCategory,t=rs.mimic.BasicType,r=rs.mimic.Subtype,u=rs.mimic.BasicSubtype,i=rs.mimic.PropertyDescriptor;this.add(new i({name:"position",displayName:"Position",category:n.APPEARANCE,type:t.ENUM,subtype:u.TOGGLE_POSITION}));this.add(new i({name:"padding",displayName:"Padding",category:n.LAYOUT,type:t.STRUCT,subtype:r.PADDING}))}});rs.mimic.BasicColorConditionDescriptor=(class extends rs.mimic.ConditionDescriptor{constructor(){super();const n=rs.mimic.BasicType,t=rs.mimic.PropertyEditor,i=rs.mimic.PropertyDescriptor;this.add(new i({name:"color",displayName:"Color",type:n.STRING,editor:t.COLOR_DIALOG}))}});registerBasicDescriptors();rs.mimic.BasicButtonFactory=(class extends rs.mimic.RegularComponentFactory{createProperties(){let n=super.createProperties();return n.size.width=100,n.size.height=30,Object.assign(n,{imageName:"",imageSize:new rs.mimic.Size({width:16,height:16}),text:"Button"}),n}parseProperties(n){const t=rs.mimic.PropertyParser;let i=super.parseProperties(n);return n??={},Object.assign(i,{imageName:t.parseString(n.imageName),imageSize:rs.mimic.Size.parse(n.imageSize),text:t.parseString(n.text)}),i}createComponent(){return super.createComponent("BasicButton")}});rs.mimic.BasicLedScript=(class extends rs.mimic.ComponentScript{dataUpdated(n){let i=n.component.bindings?.inCnlNum,t=n.component.properties,r=t.conditions;if(i>0&&r.length>0){let u=n.dataProvider.getCurData(i),f=n.dataProvider.getPrevData(i);if(dataProvider.dataChanged(u,f)){let i=t.defaultColor;if(u.d.stat>0)for(let n of r)if(n.satisfied(u.d.val)){i=n.color;break}t.backColor!==i&&(t.backColor=i,n.propertyChanged=!0)}}}});rs.mimic.BasicLedFactory=(class extends rs.mimic.RegularComponentFactory{_createExtraScript(){return new rs.mimic.BasicLedScript}_addDefaultConditions(n){const t=rs.mimic.BasicColorCondition,i=rs.mimic.ComparisonOperator;n.push(new t({comparisonOper1:i.LESS_THAN_EQUAL,color:"Red"}));n.push(new t({comparisonOper1:i.GREATER_THAN,color:"Green"}))}createProperties(){let n=super.createProperties();return n.backColor="Silver",n.border.color="Black",n.border.width=3,n.size.width=30,n.size.height=30,n.borderOpacity=30,n.isSquare=!1,n.conditions=new rs.mimic.BasicColorConditionList,n.defaultColor="Silver",this._addDefaultConditions(n.conditions),n}parseProperties(n){const i=rs.mimic.PropertyParser;let t=super.parseProperties(n);return n??={},t.borderOpacity=i.parseInt(n.borderOpacity),t.isSquare=i.parseBool(n.isSquare),t.conditions=rs.mimic.BasicColorConditionList.parse(n.conditions),t.defaultColor=i.parseString(n.defaultColor),t}createComponent(){return super.createComponent("BasicLed")}});rs.mimic.BasicToggleScript=(class extends rs.mimic.ComponentScript{dataUpdated(n){const t=rs.mimic.BasicTogglePosition;let i=n.component.bindings?.inCnlNum;if(i>0){let r=n.dataProvider.getCurData(i),u=n.dataProvider.getPrevData(i);if(dataProvider.dataChanged(r,u)){let u=n.component.properties,i=t.NOT_SET;r.d.stat>0&&(i=r.d.val>0?t.ON:t.OFF);u.position!==i&&(u.position=i,n.propertyChanged=!0)}}}getCommandValue(n){return n.component.properties.position===rs.mimic.BasicTogglePosition.ON?0:1}});rs.mimic.BasicToggleFactory=(class extends rs.mimic.RegularComponentFactory{_createDefaultBindings(n){const r=rs.mimic.DataMember;let t=n.bindings.inCnlNum,u=n.bindings.inCnlProps,i=[];return n.properties.backColor||i.push({propertyName:"backColor",dataSource:String(t),dataMember:r.COLOR0,format:"",propertyChain:["backColor"],cnlNum:t,cnlProps:u}),n.properties.border.color||i.push({propertyName:"border.color",dataSource:String(t),dataMember:r.COLOR0,format:"",propertyChain:["border","color"],cnlNum:t,cnlProps:u}),i}_createExtraScript(){return new rs.mimic.BasicToggleScript}createProperties(){let n=super.createProperties();return n.border.width=2,n.foreColor="White",n.size.width=60,n.size.height=30,n.position=rs.mimic.BasicTogglePosition.ON,n.padding=new rs.mimic.Padding,n}parseProperties(n){const i=rs.mimic.PropertyParser;let t=super.parseProperties(n);return n??={},t.position=i.parseString(n.position,rs.mimic.BasicTogglePosition.NOT_SET),t.padding=rs.mimic.Padding.parse(n.padding),t}createComponent(){return super.createComponent("BasicToggle")}});registerBasicFactories();rs.mimic.BasicButtonRenderer=(class extends rs.mimic.RegularComponentRenderer{_setBorder(n,t){t.width>0?super._setBorder(n,t):n.css("border","")}_setCornerRadius(n,t){t.isSet?super._setCornerRadius(n,t):n.css("border-radius","")}_completeDom(n){n.append("<div class='basic-button-content'><div class='basic-button-icon'><\/div><div class='basic-button-text'><\/div><\/div>")}_setClasses(n,t,i){super._setClasses(n,t,i);n.addClass("basic-button")}_setProps(n,t,i){super._setProps(n,t,i);let f=n.children(".basic-button-content:first"),r=f.children(".basic-button-icon:first"),e=f.children(".basic-button-text:first"),u=t.properties;u.imageName?(this._setBackgroundImage(r,i.getImage(u.imageName)),this._setSize(r,u.imageSize),r.css("display","")):(this._setBackgroundImage(r,null),this._setSize(r,{width:0,height:0}),r.css("display","none"));e.text(u.text)}createDom(n,t){let i=$("<button type='button'><\/button>").attr("id","comp"+t.idPrefix+n.id).attr("data-id",n.id);return this._completeDom(i,n,t),this._setClasses(i,n,t),this._setProps(i,n,t),n.dom=i,i}});rs.mimic.BasicLedRenderer=(class extends rs.mimic.RegularComponentRenderer{_setBorder(){}_setCornerRadius(){}_setLedBorder(n,t,i){super._setBorder(n,null);super._setBorder(t,i)}_setLedCornerRadius(n,t,i){super._setCornerRadius(n,i);super._setCornerRadius(t,i)}_completeDom(n){$("<div class='basic-led-border'><\/div>").appendTo(n)}_setClasses(n,t,i){super._setClasses(n,t,i);n.addClass("basic-led");t.properties.isSquare||n.addClass("circle")}_setProps(n,t,i){super._setProps(n,t,i);let u=n.children(".basic-led-border:first"),r=t.properties;this._setLedBorder(n,u,r.border);this._setLedCornerRadius(n,u,r.isSquare?r.cornerRadius:null);u.css("opacity",r.borderOpacity/100);i.editMode&&n.css("--border-width",0)}});rs.mimic.BasicToggleRenderer=(class extends rs.mimic.RegularComponentRenderer{_completeDom(n){n.append("<div class='basic-toggle-lever'><\/div>")}_setClasses(n,t,i){super._setClasses(n,t,i);n.addClass("basic-toggle");const r=rs.mimic.BasicTogglePosition;let u=t.properties.position;n.toggleClass("position-not-set",u===r.NOT_SET);n.toggleClass("position-off",u===r.OFF);n.toggleClass("position-on",u===r.ON)}_setProps(n,t,i){super._setProps(n,t,i);let r=t.properties;this._setPadding(n,r.padding);let f=n.children(".basic-toggle-lever:first"),e=Math.min(t.width,t.height),u=Math.min(t.innerWidth,t.innerHeight);n.css("border-radius",e/2);f.css({"background-color":r.foreColor,width:u,height:u})}setSize(n,t,i){super.setSize(n,t,i);let u=n.dom,e=Math.min(t,i);u.css("border-radius",e/2);let o=u.children(".basic-toggle-lever:first"),r=n.properties,s=t-r.border.width*2-r.padding.left-r.padding.right,h=i-r.border.width*2-r.padding.top-r.padding.bottom,f=Math.min(s,h);o.css({width:f,height:f})}});registerBasicRenderers();rs.mimic.BasicTogglePosition=(class{static NOT_SET="NotSet";static OFF="Off";static ON="On";});rs.mimic.BasicColorCondition=(class extends rs.mimic.Condition{color="";constructor(n){super();Object.assign(this,n)}get typeName(){return"BasicColorCondition"}static parse(n){const i=rs.mimic.PropertyParser;let t=new rs.mimic.BasicColorCondition;return n&&(t.color=i.parseString(n.color),t._copyFrom(n)),t}});rs.mimic.BasicColorConditionList=(class extends rs.mimic.List{constructor(){super(()=>new rs.mimic.BasicColorCondition)}static parse(n){const i=rs.mimic.BasicColorCondition;let t=new rs.mimic.BasicColorConditionList;if(Array.isArray(n))for(let r of n)t.push(i.parse(r));return t}});